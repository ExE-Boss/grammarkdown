{
  "api/grammarkdown.html": {
    "href": "api/grammarkdown.html",
    "title": "API Reference | Grammarkdown API Reference",
    "keywords": "Package grammarkdown grammarkdown has an API that can be consumed: var grammarkdown = require(\"grammarkdown\") , Grammar = grammarkdown.Grammar , EmitFormat = grammarkdown.EmitFormat var filename = \"...\"; var source = \"...\"; var output; // parse var grammar = new Grammar( [filename], { format: EmitFormat.markdown }, function () { return source; }); // bind (optional, bind happens automatically during check) grammar.bindSync(); // check (optional, check happens automatically during emit) grammar.checkSync(); // emit grammar.emitSync(undefined, function (file, text) { output = text; }); console.log(output); Position Range TextChange Classes Argument ArgumentList AssertionBase AsyncHost AsyncSingleFileHost Binder BindingTable ButNotSymbol Checker CommentTriviaBase Constraints Define DiagnosticMessages EcmarkupEmitter Emitter EmptyAssertion Grammar Host HostBase HtmlCloseTagTrivia HtmlEmitter HtmlOpenTagTrivia HtmlTriviaBase Identifier Import InvalidAssertion InvalidSymbol LexicalGoalAssertion LexicalSymbolBase LineMap LinkReference LookaheadAssertion MarkdownEmitter MetaElementBase MultiLineCommentTrivia Node NodeNavigator NodeVisitor Nonterminal NoSymbolHereAssertion NullDiagnosticMessages OneOfList OneOfSymbol OptionalSymbolBase Parameter ParameterList Parser PlaceholderSymbol PrimarySymbolBase Production ProductionBodyBase Prose ProseAssertion ProseFragmentLiteral Resolver RightHandSide RightHandSideList Scanner SingleFileHost SingleLineCommentTrivia SourceElementBase SourceFile StringLiteral StringWriter Symbol SymbolSet SymbolSpan SymbolTable SyncHost SyncSingleFileHost Terminal Token TriviaBase UnicodeCharacterLiteral UnicodeCharacterRange Interfaces AsyncHostOptions CompilerOptions Diagnostic DiagnosticInfo HostBaseOptions HostOptions Position Range SyncHostOptions TextChange TextContent TextRange Enums CharacterCodes EmitFormat NewLineKind SymbolKind SyntaxKind Functions forEachChild(node, cbNode) Declaration export declare function forEachChild<T>(node: Node | undefined, cbNode: (node: Node) => T | undefined): T | undefined; Parameters Type Name Description Node | undefined node (node: Node ) => T | undefined cbNode Returns Type Description T | undefined Type Parameters Name Description T formatList(tokens) Declaration export declare function formatList(tokens: (SyntaxKind | string)[]): string; Parameters Type Name Description ( SyntaxKind | string)[] tokens Returns Type Description string formatString(format, args) Declaration export declare function formatString(format: string, args?: any[]): string; Parameters Type Name Description string format any[] args Returns Type Description string formatString(format, args) Declaration export declare function formatString(format: string, ...args: any[]): string; Parameters Type Name Description string format any[] args Returns Type Description string getDefaultOptions() Declaration export declare function getDefaultOptions(): CompilerOptions; Returns Type Description CompilerOptions isAssertionKind(kind) Declaration export declare function isAssertionKind(kind: SyntaxKind): kind is AssertionKind; Parameters Type Name Description SyntaxKind kind Returns Type Description kind is AssertionKind isCommentTriviaKind(kind) Declaration export declare function isCommentTriviaKind(kind: SyntaxKind): kind is CommentTriviaKind; Parameters Type Name Description SyntaxKind kind Returns Type Description kind is CommentTriviaKind isHtmlTriviaKind(kind) Declaration export declare function isHtmlTriviaKind(kind: SyntaxKind): kind is HtmlTriviaKind; Parameters Type Name Description SyntaxKind kind Returns Type Description kind is HtmlTriviaKind isKeywordKind(kind) Declaration export declare function isKeywordKind(kind: SyntaxKind): kind is KeywordKind; Parameters Type Name Description SyntaxKind kind Returns Type Description kind is KeywordKind isLexicalSymbolKind(kind) Declaration export declare function isLexicalSymbolKind(kind: SyntaxKind): kind is LexicalSymbolKind; Parameters Type Name Description SyntaxKind kind Returns Type Description kind is LexicalSymbolKind isMetaElementKind(kind) Declaration export declare function isMetaElementKind(kind: SyntaxKind): kind is MetaElementKind; Parameters Type Name Description SyntaxKind kind Returns Type Description kind is MetaElementKind isOptionalSymbolKind(kind) Declaration export declare function isOptionalSymbolKind(kind: SyntaxKind): kind is OptionalSymbolKind; Parameters Type Name Description SyntaxKind kind Returns Type Description kind is OptionalSymbolKind isPrimarySymbolKind(kind) Declaration export declare function isPrimarySymbolKind(kind: SyntaxKind): kind is PrimarySymbolKind; Parameters Type Name Description SyntaxKind kind Returns Type Description kind is PrimarySymbolKind isProductionBodyKind(kind) Declaration export declare function isProductionBodyKind(kind: SyntaxKind): kind is ProductionBodyKind; Parameters Type Name Description SyntaxKind kind Returns Type Description kind is ProductionBodyKind isProseFragmentKind(kind) Declaration export declare function isProseFragmentKind(kind: SyntaxKind): kind is ProseFragmentKind; Parameters Type Name Description SyntaxKind kind Returns Type Description kind is ProseFragmentKind isProseFragmentLiteralKind(kind) Declaration export declare function isProseFragmentLiteralKind(kind: SyntaxKind): kind is ProseFragmentLiteralKind; Parameters Type Name Description SyntaxKind kind Returns Type Description kind is ProseFragmentLiteralKind isPunctuationKind(kind) Declaration export declare function isPunctuationKind(kind: SyntaxKind): kind is PunctuationKind; Parameters Type Name Description SyntaxKind kind Returns Type Description kind is PunctuationKind isSourceElementKind(kind) Declaration export declare function isSourceElementKind(kind: SyntaxKind): kind is SourceElementKind; Parameters Type Name Description SyntaxKind kind Returns Type Description kind is SourceElementKind isTextContentKind(kind) Declaration export declare function isTextContentKind(kind: SyntaxKind): kind is TextContentKind; Parameters Type Name Description SyntaxKind kind Returns Type Description kind is TextContentKind isTokenKind(kind) Declaration export declare function isTokenKind(kind: SyntaxKind): kind is TokenKind; Parameters Type Name Description SyntaxKind kind Returns Type Description kind is TokenKind isTriviaKind(kind) Declaration export declare function isTriviaKind(kind: SyntaxKind): kind is TriviaKind; Parameters Type Name Description SyntaxKind kind Returns Type Description kind is TriviaKind scanHtmlTrivia(text, pos, end) Declaration export declare function scanHtmlTrivia(text: string, pos: number, end: number): HtmlTrivia[] | undefined; Parameters Type Name Description string text number pos number end Returns Type Description HtmlTrivia [] | undefined skipTrivia(text, pos, end, htmlTrivia, commentTrivia) Declaration export declare function skipTrivia(text: string, pos: number, end: number, htmlTrivia?: HtmlTrivia[], commentTrivia?: CommentTrivia[]): number; Parameters Type Name Description string text number pos number end HtmlTrivia [] htmlTrivia CommentTrivia [] commentTrivia Returns Type Description number stringToToken(text) Declaration export declare function stringToToken(text: string): SyntaxKind | undefined; Parameters Type Name Description string text Returns Type Description SyntaxKind | undefined tokenToString(kind, quoted) Declaration export declare function tokenToString(kind: SyntaxKind | string, quoted?: boolean): string; Parameters Type Name Description SyntaxKind | string kind boolean quoted Returns Type Description string Variables Diagnostics Declaration Diagnostics: { Constant_expected: { code: number; message: string; }; _0_expected: { code: number; message: string; }; _0_or_1_: { code: number; message: string; }; Unexpected_token_0_: { code: number; message: string; }; Invalid_character: { code: number; message: string; }; Unterminated_string_literal: { code: number; message: string; }; Invalid_escape_sequence: { code: number; message: string; }; Digit_expected: { code: number; message: string; }; Production_expected: { code: number; message: string; }; Unterminated_identifier_literal: { code: number; message: string; }; Obsolete_0_: { code: number; message: string; warning: true; }; Cannot_find_name_0_: { code: number; message: string; }; Duplicate_identifier_0_: { code: number; message: string; }; Duplicate_terminal_0_: { code: number; message: string; }; Argument_0_cannot_be_specified_multiple_times: { code: number; message: string; }; Production_0_does_not_have_a_parameter_named_1_: { code: number; message: string; }; Production_0_is_missing_parameter_1_All_definitions_of_production_0_must_specify_the_same_formal_parameters: { code: number; message: string; }; There_is_no_argument_given_for_parameter_0_: { code: number; message: string; }; Parameter_0_is_unused: { code: number; message: string; }; } Type Aliases ArgumentOperatorKind Declaration export declare type ArgumentOperatorKind = SyntaxKind.QuestionToken | SyntaxKind.PlusToken | SyntaxKind.TildeToken; Assertion Declaration export declare type Assertion = EmptyAssertion | LookaheadAssertion | LexicalGoalAssertion | NoSymbolHereAssertion | ProseAssertion | InvalidAssertion; AssertionKind Declaration export declare type AssertionKind = SyntaxKind.EmptyAssertion | SyntaxKind.LookaheadAssertion | SyntaxKind.LexicalGoalAssertion | SyntaxKind.NoSymbolHereAssertion | SyntaxKind.ProseAssertion | SyntaxKind.InvalidAssertion; BooleanKind Declaration export declare type BooleanKind = SyntaxKind.TrueKeyword | SyntaxKind.FalseKeyword; CommentTrivia Declaration export declare type CommentTrivia = SingleLineCommentTrivia | MultiLineCommentTrivia; CommentTriviaKind Declaration export declare type CommentTriviaKind = SyntaxKind.SingleLineCommentTrivia | SyntaxKind.MultiLineCommentTrivia; Declaration Declaration export declare type Declaration = SourceFile | Production | Parameter; HtmlTrivia Declaration export declare type HtmlTrivia = HtmlOpenTagTrivia | HtmlCloseTagTrivia; HtmlTriviaKind Declaration export declare type HtmlTriviaKind = SyntaxKind.HtmlOpenTagTrivia | SyntaxKind.HtmlCloseTagTrivia; KeywordKind Declaration export declare type KeywordKind = SyntaxKind.ButKeyword | SyntaxKind.DefineKeyword | SyntaxKind.EmptyKeyword | SyntaxKind.FalseKeyword | SyntaxKind.GoalKeyword | SyntaxKind.HereKeyword | SyntaxKind.ImportKeyword | SyntaxKind.LexicalKeyword | SyntaxKind.LookaheadKeyword | SyntaxKind.NoKeyword | SyntaxKind.NotKeyword | SyntaxKind.OfKeyword | SyntaxKind.OneKeyword | SyntaxKind.OrKeyword | SyntaxKind.ThroughKeyword | SyntaxKind.TrueKeyword; LegacyReadFileCallback Declaration export declare type LegacyReadFileCallback = (this: never, file: string, cancelToken?: CancellationToken) => PromiseLike<string> | string; LegacyReadFileSyncCallback Declaration export declare type LegacyReadFileSyncCallback = (this: never, file: string, cancelToken?: CancellationToken) => string; LegacyWriteFileCallback Declaration export declare type LegacyWriteFileCallback = (this: never, file: string, content: string, cancelToken?: CancellationToken) => PromiseLike<void> | void; LegacyWriteFileSyncCallback Declaration export declare type LegacyWriteFileSyncCallback = (this: never, file: string, content: string, cancelToken?: CancellationToken) => void; LexicalSymbol Declaration export declare type LexicalSymbol = PrimarySymbol | Assertion | PlaceholderSymbol | UnicodeCharacterRange | ButNotSymbol | Prose | OneOfSymbol | InvalidSymbol; LexicalSymbolKind Declaration export declare type LexicalSymbolKind = PrimarySymbolKind | AssertionKind | SyntaxKind.PlaceholderSymbol | SyntaxKind.UnicodeCharacterRange | SyntaxKind.ButNotSymbol | SyntaxKind.Prose | SyntaxKind.OneOfSymbol | SyntaxKind.InvalidSymbol; LookaheadOperatorKind Declaration export declare type LookaheadOperatorKind = SyntaxKind.EqualsToken | SyntaxKind.EqualsEqualsToken | SyntaxKind.ExclamationEqualsToken | SyntaxKind.NotEqualToToken | SyntaxKind.LessThanMinusToken | SyntaxKind.ElementOfToken | SyntaxKind.LessThanExclamationToken | SyntaxKind.NotAnElementOfToken; MetaElement Declaration export declare type MetaElement = Import | Define; MetaElementKind Declaration export declare type MetaElementKind = SyntaxKind.Import | SyntaxKind.Define; OptionalSymbol Declaration export declare type OptionalSymbol = UnicodeCharacterLiteral | Terminal | Nonterminal; OptionalSymbolKind Declaration export declare type OptionalSymbolKind = SyntaxKind.UnicodeCharacterLiteral | SyntaxKind.Terminal | SyntaxKind.Nonterminal; ParameterOperatorKind Declaration export declare type ParameterOperatorKind = SyntaxKind.PlusToken | SyntaxKind.TildeToken; PrimarySymbol Declaration export declare type PrimarySymbol = OptionalSymbol; PrimarySymbolKind Declaration export declare type PrimarySymbolKind = OptionalSymbolKind; ProductionBody Declaration export declare type ProductionBody = OneOfList | RightHandSide | RightHandSideList; ProductionBodyKind Declaration export declare type ProductionBodyKind = SyntaxKind.OneOfList | SyntaxKind.RightHandSide | SyntaxKind.RightHandSideList; ProductionSeperatorKind Declaration export declare type ProductionSeperatorKind = SyntaxKind.ColonToken | SyntaxKind.ColonColonToken | SyntaxKind.ColonColonColonToken; ProseFragment Declaration export declare type ProseFragment = ProseFragmentLiteral<ProseFragmentLiteralKind> | Terminal | Nonterminal; ProseFragmentKind Declaration export declare type ProseFragmentKind = ProseFragmentLiteralKind | SyntaxKind.Terminal | SyntaxKind.Nonterminal; ProseFragmentLiteralKind Declaration export declare type ProseFragmentLiteralKind = SyntaxKind.ProseFull | SyntaxKind.ProseHead | SyntaxKind.ProseMiddle | SyntaxKind.ProseTail; PunctuationKind Declaration export declare type PunctuationKind = SyntaxKind.AtToken | SyntaxKind.OpenBraceToken | SyntaxKind.CloseBraceToken | SyntaxKind.OpenBracketToken | SyntaxKind.OpenBracketGreaterThanToken | SyntaxKind.CloseBracketToken | SyntaxKind.GreaterThanToken | SyntaxKind.OpenParenToken | SyntaxKind.CloseParenToken | SyntaxKind.ColonToken | SyntaxKind.ColonColonToken | SyntaxKind.ColonColonColonToken | SyntaxKind.CommaToken | SyntaxKind.PlusToken | SyntaxKind.TildeToken | SyntaxKind.QuestionToken | SyntaxKind.EqualsToken | SyntaxKind.EqualsEqualsToken | SyntaxKind.ExclamationEqualsToken | SyntaxKind.LessThanExclamationToken | SyntaxKind.LessThanMinusToken | SyntaxKind.NotEqualToToken | SyntaxKind.ElementOfToken | SyntaxKind.NotAnElementOfToken; ReadFileCallback Declaration export declare type ReadFileCallback = (this: never, file: string, cancelToken?: CancelToken) => PromiseLike<string> | string; ReadFileSyncCallback Declaration export declare type ReadFileSyncCallback = (this: never, file: string, cancelToken?: CancelToken) => string; SourceElement Declaration export declare type SourceElement = Production | MetaElement; SourceElementKind Declaration export declare type SourceElementKind = MetaElementKind | SyntaxKind.Production; TextContentKind Declaration export declare type TextContentKind = SyntaxKind.StringLiteral | SyntaxKind.Terminal | SyntaxKind.UnicodeCharacterLiteral | ProseFragmentLiteralKind | SyntaxKind.Identifier; TokenKind Declaration export declare type TokenKind = SyntaxKind.EndOfFileToken | PunctuationKind | KeywordKind; Trivia Declaration export declare type Trivia = CommentTrivia | HtmlTrivia; TriviaKind Declaration export declare type TriviaKind = CommentTriviaKind | HtmlTriviaKind; WriteFileCallback Declaration export declare type WriteFileCallback = (this: never, file: string, content: string, cancelToken?: CancelToken) => PromiseLike<void> | void; WriteFileSyncCallback Declaration export declare type WriteFileSyncCallback = (this: never, file: string, content: string, cancelToken?: CancelToken) => void;"
  },
  "api/grammarkdown/argument.html": {
    "href": "api/grammarkdown/argument.html",
    "title": "Class Argument | Grammarkdown API Reference",
    "keywords": "Class Argument Inheritance Node < SyntaxKind.Argument > Argument Package : grammarkdown Constructors (constructor)(operatorToken, name) Constructs a new instance of the Argument class Declaration constructor(operatorToken: Token<ArgumentOperatorKind> | undefined, name: Identifier | undefined); Parameters Type Name Description Token < ArgumentOperatorKind > | undefined operatorToken Identifier | undefined name Properties firstChild Declaration get firstChild(): Node | undefined; Property Value Type Description Node | undefined lastChild Declaration get lastChild(): Node | undefined; Property Value Type Description Node | undefined name Declaration readonly name: Identifier | undefined; Property Value Type Description Identifier | undefined operatorToken Declaration readonly operatorToken: Token<ArgumentOperatorKind> | undefined; Property Value Type Description Token < ArgumentOperatorKind > | undefined Methods children() Declaration children(): IterableIterator<Node>; Returns Type Description IterableIterator < Node > forEachChild(cbNode) Declaration forEachChild<T>(cbNode: (node: Node) => T | undefined): T | undefined; Parameters Type Name Description (node: Node ) => T | undefined cbNode Returns Type Description T | undefined Type Parameters Name Description T update(name) Declaration update(name: Identifier | undefined): Argument; Parameters Type Name Description Identifier | undefined name Returns Type Description Argument"
  },
  "api/grammarkdown/argumentlist.html": {
    "href": "api/grammarkdown/argumentlist.html",
    "title": "Class ArgumentList | Grammarkdown API Reference",
    "keywords": "Class ArgumentList Inheritance Node < SyntaxKind.ArgumentList > ArgumentList Package : grammarkdown Constructors (constructor)(openParenToken, elements, closeParenToken) Constructs a new instance of the ArgumentList class Declaration constructor(openParenToken: Token<SyntaxKind.OpenParenToken | SyntaxKind.OpenBracketToken>, elements: ReadonlyArray<Argument> | undefined, closeParenToken: Token<SyntaxKind.CloseParenToken | SyntaxKind.CloseBracketToken> | undefined); Parameters Type Name Description Token < SyntaxKind.OpenParenToken | SyntaxKind.OpenBracketToken > openParenToken ReadonlyArray < Argument > | undefined elements Token < SyntaxKind.CloseParenToken | SyntaxKind.CloseBracketToken > | undefined closeParenToken Properties closeParenToken Declaration readonly closeParenToken: Token<SyntaxKind.CloseParenToken | SyntaxKind.CloseBracketToken> | undefined; Property Value Type Description Token < SyntaxKind.CloseParenToken | SyntaxKind.CloseBracketToken > | undefined elements Declaration readonly elements: ReadonlyArray<Argument> | undefined; Property Value Type Description ReadonlyArray < Argument > | undefined firstChild Declaration get firstChild(): Node | undefined; Property Value Type Description Node | undefined lastChild Declaration get lastChild(): Node | undefined; Property Value Type Description Node | undefined openParenToken Declaration readonly openParenToken: Token<SyntaxKind.OpenParenToken | SyntaxKind.OpenBracketToken>; Property Value Type Description Token < SyntaxKind.OpenParenToken | SyntaxKind.OpenBracketToken > Methods children() Declaration children(): IterableIterator<Node>; Returns Type Description IterableIterator < Node > forEachChild(cbNode) Declaration forEachChild<T>(cbNode: (node: Node) => T | undefined): T | undefined; Parameters Type Name Description (node: Node ) => T | undefined cbNode Returns Type Description T | undefined Type Parameters Name Description T update(elements) Declaration update(elements: ReadonlyArray<Argument> | undefined): ArgumentList; Parameters Type Name Description ReadonlyArray < Argument > | undefined elements Returns Type Description ArgumentList"
  },
  "api/grammarkdown/assertionbase.html": {
    "href": "api/grammarkdown/assertionbase.html",
    "title": "Class AssertionBase | Grammarkdown API Reference",
    "keywords": "Class AssertionBase Inheritance LexicalSymbolBase <TKind> AssertionBase Package : grammarkdown Constructors (constructor)(kind, openBracketToken, closeBracketToken) Constructs a new instance of the AssertionBase class Declaration constructor(kind: TKind, openBracketToken: Token<TBracket>, closeBracketToken: Token<SyntaxKind.CloseBracketToken> | undefined); Parameters Type Name Description TKind kind Token <TBracket> openBracketToken Token < SyntaxKind.CloseBracketToken > | undefined closeBracketToken Properties closeBracketToken Declaration readonly closeBracketToken: Token<SyntaxKind.CloseBracketToken> | undefined; Property Value Type Description Token < SyntaxKind.CloseBracketToken > | undefined firstChild Declaration get firstChild(): Node | undefined; Property Value Type Description Node | undefined lastChild Declaration abstract get lastChild(): Node | undefined; Property Value Type Description Node | undefined openBracketToken Declaration readonly openBracketToken: Token<TBracket>; Property Value Type Description Token <TBracket>"
  },
  "api/grammarkdown/asynchost.html": {
    "href": "api/grammarkdown/asynchost.html",
    "title": "Class AsyncHost | Grammarkdown API Reference",
    "keywords": "Class AsyncHost Inheritance HostBase AsyncHost Package : grammarkdown Constructors (constructor)({ readFile, writeFile, ...baseOptions }) Constructs a new instance of the AsyncHost class Declaration constructor({ readFile, writeFile, ...baseOptions }?: AsyncHostOptions); Parameters Type Name Description AsyncHostOptions { readFile, writeFile, ...baseOptions } Methods forFile(content, file, hostFallback) Declaration static forFile(content: string, file?: string, hostFallback?: AsyncHost): AsyncSingleFileHost; Parameters Type Name Description string content string file AsyncHost hostFallback Returns Type Description AsyncSingleFileHost getSourceFile(file, cancelable) Declaration getSourceFile(file: string, cancelable?: Cancelable): Promise<SourceFile | undefined>; Parameters Type Name Description string file Cancelable cancelable Returns Type Description Promise < SourceFile | undefined> getSourceFile(file, cancelable) Declaration getSourceFile(file: string, cancelable?: CancellationToken | Cancelable): Promise<SourceFile | undefined>; Parameters Type Name Description string file CancellationToken | Cancelable cancelable Returns Type Description Promise < SourceFile | undefined> readFile(file, cancelable) Declaration readFile(file: string, cancelable?: Cancelable): Promise<string | undefined>; Parameters Type Name Description string file Cancelable cancelable Returns Type Description Promise <string | undefined> readFile(file, cancelable) Declaration readFile(file: string, cancelable?: CancellationToken | Cancelable): Promise<string | undefined>; Parameters Type Name Description string file CancellationToken | Cancelable cancelable Returns Type Description Promise <string | undefined> writeFile(file, text, cancelable) Declaration writeFile(file: string, text: string, cancelable?: Cancelable): Promise<void>; Parameters Type Name Description string file string text Cancelable cancelable Returns Type Description Promise <void> writeFile(file, text, cancelable) Declaration writeFile(file: string, text: string, cancelable?: CancellationToken | Cancelable): Promise<void>; Parameters Type Name Description string file string text CancellationToken | Cancelable cancelable Returns Type Description Promise <void>"
  },
  "api/grammarkdown/asynchostoptions.html": {
    "href": "api/grammarkdown/asynchostoptions.html",
    "title": "Interface AsyncHostOptions | Grammarkdown API Reference",
    "keywords": "Interface AsyncHostOptions Inheritance HostBaseOptions AsyncHostOptions Package : grammarkdown Properties readFile Declaration readFile?: ReadFileCallback | LegacyReadFileCallback | false; Property Value Type Description ReadFileCallback | LegacyReadFileCallback | false writeFile Declaration writeFile?: WriteFileCallback | LegacyWriteFileCallback | false; Property Value Type Description WriteFileCallback | LegacyWriteFileCallback | false"
  },
  "api/grammarkdown/asyncsinglefilehost.html": {
    "href": "api/grammarkdown/asyncsinglefilehost.html",
    "title": "Class AsyncSingleFileHost | Grammarkdown API Reference",
    "keywords": "Class AsyncSingleFileHost Inheritance HostBase AsyncHost AsyncSingleFileHost Package : grammarkdown Constructors (constructor)(file, content, hostFallback) Constructs a new instance of the AsyncSingleFileHost class Declaration constructor(file: string, content: string, hostFallback?: AsyncHost); Parameters Type Name Description string file string content AsyncHost hostFallback Properties content Declaration readonly content: string; Property Value Type Description string file Declaration readonly file: string; Property Value Type Description string Methods normalizeFile(file) Declaration normalizeFile(file: string): string; Parameters Type Name Description string file Returns Type Description string readFile(file, cancelable) Declaration readFile(file: string, cancelable?: Cancelable): Promise<string | undefined>; Parameters Type Name Description string file Cancelable cancelable Returns Type Description Promise <string | undefined> readFile(file, cancelable) Declaration readFile(file: string, cancelable?: CancellationToken | Cancelable): Promise<string | undefined>; Parameters Type Name Description string file CancellationToken | Cancelable cancelable Returns Type Description Promise <string | undefined> resolveFile(file, referer) Declaration resolveFile(file: string, referer?: string): string; Parameters Type Name Description string file string referer Returns Type Description string writeFile(file, text, cancelable) Declaration writeFile(file: string, text: string, cancelable?: Cancelable): Promise<void>; Parameters Type Name Description string file string text Cancelable cancelable Returns Type Description Promise <void> writeFile(file, text, cancelable) Declaration writeFile(file: string, text: string, cancelable?: CancellationToken | Cancelable): Promise<void>; Parameters Type Name Description string file string text CancellationToken | Cancelable cancelable Returns Type Description Promise <void>"
  },
  "api/grammarkdown/binder.html": {
    "href": "api/grammarkdown/binder.html",
    "title": "Class Binder | Grammarkdown API Reference",
    "keywords": "Class Binder Package : grammarkdown Methods bindSourceFile(file, bindings, cancelable) Declaration bindSourceFile(file: SourceFile, bindings: BindingTable, cancelable?: Cancelable): void; Parameters Type Name Description SourceFile file BindingTable bindings Cancelable cancelable Returns Type Description void bindSourceFile(file, bindings, cancelable) Declaration bindSourceFile(file: SourceFile, bindings: BindingTable, cancelable?: CancellationToken | Cancelable): void; Parameters Type Name Description SourceFile file BindingTable bindings CancellationToken | Cancelable cancelable Returns Type Description void"
  },
  "api/grammarkdown/bindingtable.html": {
    "href": "api/grammarkdown/bindingtable.html",
    "title": "Class BindingTable | Grammarkdown API Reference",
    "keywords": "Class BindingTable Package : grammarkdown Properties globals Declaration readonly globals: SymbolTable; Property Value Type Description SymbolTable isEmpty Declaration get isEmpty(): boolean; Property Value Type Description boolean Methods getAncestor(node, kind) Declaration getAncestor(node: Node | undefined, kind: SyntaxKind): Node | undefined; Parameters Type Name Description Node | undefined node SyntaxKind kind Returns Type Description Node | undefined getDeclarations(symbol) Declaration getDeclarations(symbol: Symbol | undefined): (SourceFile | Production | Parameter)[]; Parameters Type Name Description Symbol | undefined symbol Returns Type Description ( SourceFile | Production | Parameter )[] getParent(node) Declaration getParent(node: Node | undefined): Node | undefined; Parameters Type Name Description Node | undefined node Returns Type Description Node | undefined getReferences(symbol) Declaration getReferences(symbol: Symbol | undefined): Node[]; Parameters Type Name Description Symbol | undefined symbol Returns Type Description Node [] getSourceFile(node) Declaration getSourceFile(node: Node | undefined): SourceFile | undefined; Parameters Type Name Description Node | undefined node Returns Type Description SourceFile | undefined getSymbol(node) Declaration getSymbol(node: Node | undefined): Symbol | undefined; Parameters Type Name Description Node | undefined node Returns Type Description Symbol | undefined hasParent(node) Declaration hasParent(node: Node | undefined): boolean; Parameters Type Name Description Node | undefined node Returns Type Description boolean hasSymbol(node) Declaration hasSymbol(node: Node | undefined): boolean; Parameters Type Name Description Node | undefined node Returns Type Description boolean resolveSymbol(location, name, meaning) Declaration resolveSymbol(location: Node | undefined, name: string | undefined, meaning: SymbolKind): Symbol | undefined; Parameters Type Name Description Node | undefined location string | undefined name SymbolKind meaning Returns Type Description Symbol | undefined"
  },
  "api/grammarkdown/butnotsymbol.html": {
    "href": "api/grammarkdown/butnotsymbol.html",
    "title": "Class ButNotSymbol | Grammarkdown API Reference",
    "keywords": "Class ButNotSymbol Inheritance LexicalSymbolBase < SyntaxKind.ButNotSymbol > ButNotSymbol Package : grammarkdown Constructors (constructor)(left, butKeyword, notKeyword, right) Constructs a new instance of the ButNotSymbol class Declaration constructor(left: LexicalSymbol, butKeyword: Token<SyntaxKind.ButKeyword> | undefined, notKeyword: Token<SyntaxKind.NotKeyword> | undefined, right: LexicalSymbol | undefined); Parameters Type Name Description LexicalSymbol left Token < SyntaxKind.ButKeyword > | undefined butKeyword Token < SyntaxKind.NotKeyword > | undefined notKeyword LexicalSymbol | undefined right Properties butKeyword Declaration readonly butKeyword: Token<SyntaxKind.ButKeyword> | undefined; Property Value Type Description Token < SyntaxKind.ButKeyword > | undefined firstChild Declaration get firstChild(): Node | undefined; Property Value Type Description Node | undefined lastChild Declaration get lastChild(): Node | undefined; Property Value Type Description Node | undefined left Declaration readonly left: LexicalSymbol; Property Value Type Description LexicalSymbol notKeyword Declaration readonly notKeyword: Token<SyntaxKind.NotKeyword> | undefined; Property Value Type Description Token < SyntaxKind.NotKeyword > | undefined right Declaration readonly right: LexicalSymbol | undefined; Property Value Type Description LexicalSymbol | undefined Methods children() Declaration children(): IterableIterator<Node>; Returns Type Description IterableIterator < Node > forEachChild(cbNode) Declaration forEachChild<T>(cbNode: (node: Node) => T | undefined): T | undefined; Parameters Type Name Description (node: Node ) => T | undefined cbNode Returns Type Description T | undefined Type Parameters Name Description T update(left, right) Declaration update(left: LexicalSymbol, right: LexicalSymbol | undefined): ButNotSymbol; Parameters Type Name Description LexicalSymbol left LexicalSymbol | undefined right Returns Type Description ButNotSymbol"
  },
  "api/grammarkdown/charactercodes.html": {
    "href": "api/grammarkdown/charactercodes.html",
    "title": "Enum CharacterCodes | Grammarkdown API Reference",
    "keywords": "Enum CharacterCodes Namespace : Assembly : .dll Syntax Fields Name Description Ampersand Asterisk At Backslash Backspace Backtick Bar ByteOrderMark CarriageReturn CloseBrace CloseBracket CloseParen Colon Comma Dot DoubleQuote ElementOf EmQuad EmSpace EnQuad EnSpace Equals Exclamation FigureSpace FormFeed FourPerEmSpace GreaterThan HairSpace Hash IdeographicSpace LessThan LineFeed LineSeparator LowerA LowerB LowerC LowerD LowerE LowerF LowerG LowerH LowerI LowerJ LowerK LowerL LowerM LowerN LowerO LowerP LowerQ LowerR LowerS LowerT LowerU LowerV LowerW LowerX LowerY LowerZ MathematicalSpace MaxAsciiCharacter Minus NarrowNoBreakSpace NextLine NonBreakingSpace NotAnElementOf NotEqualTo NullCharacter Number0 Number1 Number2 Number3 Number4 Number5 Number6 Number7 Number8 Number9 NumberSign Ogham OpenBrace OpenBracket OpenParen ParagraphSeparator Plus PunctuationSpace Question Semicolon SingleQuote SixPerEmSpace Slash Space Tab ThinSpace ThreePerEmSpace Tilde Underscore UpperA UpperB UpperC UpperD UpperE UpperF UpperG UpperH UpperI UpperJ UpperK UpperL UpperM UpperN UpperO UpperP UpperQ UpperR UpperS UpperT UpperU UpperV UpperW UpperX UpperY UpperZ VerticalTab ZeroWidthSpace"
  },
  "api/grammarkdown/checker.html": {
    "href": "api/grammarkdown/checker.html",
    "title": "Class Checker | Grammarkdown API Reference",
    "keywords": "Class Checker Package : grammarkdown Constructors (constructor)(options) Constructs a new instance of the Checker class Declaration constructor(options?: CompilerOptions); Parameters Type Name Description CompilerOptions options Methods checkSourceFile(sourceFile, bindings, diagnostics, cancelable) Declaration checkSourceFile(sourceFile: SourceFile, bindings: BindingTable, diagnostics: DiagnosticMessages, cancelable?: Cancelable): void; Parameters Type Name Description SourceFile sourceFile BindingTable bindings DiagnosticMessages diagnostics Cancelable cancelable Returns Type Description void checkSourceFile(sourceFile, bindings, diagnostics, cancelable) Declaration checkSourceFile(sourceFile: SourceFile, bindings: BindingTable, diagnostics: DiagnosticMessages, cancelable?: CancellationToken | Cancelable): void; Parameters Type Name Description SourceFile sourceFile BindingTable bindings DiagnosticMessages diagnostics CancellationToken | Cancelable cancelable Returns Type Description void"
  },
  "api/grammarkdown/commenttriviabase.html": {
    "href": "api/grammarkdown/commenttriviabase.html",
    "title": "Class CommentTriviaBase | Grammarkdown API Reference",
    "keywords": "Class CommentTriviaBase Inheritance TriviaBase <TKind> CommentTriviaBase Package : grammarkdown"
  },
  "api/grammarkdown/compileroptions.html": {
    "href": "api/grammarkdown/compileroptions.html",
    "title": "Interface CompilerOptions | Grammarkdown API Reference",
    "keywords": "Interface CompilerOptions Package : grammarkdown Properties diagnostics Declaration diagnostics?: boolean; Property Value Type Description boolean emitLinks Declaration emitLinks?: boolean; Property Value Type Description boolean format Declaration format?: EmitFormat; Property Value Type Description EmitFormat newLine Declaration newLine?: NewLineKind; Property Value Type Description NewLineKind noChecks Declaration noChecks?: boolean; Property Value Type Description boolean noEmit Declaration noEmit?: boolean; Property Value Type Description boolean noEmitOnError Declaration noEmitOnError?: boolean; Property Value Type Description boolean noStrictParametricProductions Declaration noStrictParametricProductions?: boolean; Property Value Type Description boolean noUnusedParameters Declaration noUnusedParameters?: boolean; Property Value Type Description boolean out Declaration out?: string; Property Value Type Description string"
  },
  "api/grammarkdown/constraints.html": {
    "href": "api/grammarkdown/constraints.html",
    "title": "Class Constraints | Grammarkdown API Reference",
    "keywords": "Class Constraints Inheritance Node < SyntaxKind.Constraints > Constraints Package : grammarkdown Constructors (constructor)(openBracketToken, elements, closeBracketToken) Constructs a new instance of the Constraints class Declaration constructor(openBracketToken: Token<SyntaxKind.OpenBracketToken>, elements: ReadonlyArray<Argument> | undefined, closeBracketToken: Token<SyntaxKind.CloseBracketToken> | undefined); Parameters Type Name Description Token < SyntaxKind.OpenBracketToken > openBracketToken ReadonlyArray < Argument > | undefined elements Token < SyntaxKind.CloseBracketToken > | undefined closeBracketToken Properties closeBracketToken Declaration readonly closeBracketToken: Token<SyntaxKind.CloseBracketToken> | undefined; Property Value Type Description Token < SyntaxKind.CloseBracketToken > | undefined elements Declaration readonly elements: ReadonlyArray<Argument> | undefined; Property Value Type Description ReadonlyArray < Argument > | undefined firstChild Declaration get firstChild(): Node | undefined; Property Value Type Description Node | undefined lastChild Declaration get lastChild(): Node | undefined; Property Value Type Description Node | undefined openBracketToken Declaration readonly openBracketToken: Token<SyntaxKind.OpenBracketToken>; Property Value Type Description Token < SyntaxKind.OpenBracketToken > Methods children() Declaration children(): IterableIterator<Node>; Returns Type Description IterableIterator < Node > forEachChild(cbNode) Declaration forEachChild<T>(cbNode: (node: Node) => T | undefined): T | undefined; Parameters Type Name Description (node: Node ) => T | undefined cbNode Returns Type Description T | undefined Type Parameters Name Description T update(elements) Declaration update(elements: ReadonlyArray<Argument> | undefined): Constraints; Parameters Type Name Description ReadonlyArray < Argument > | undefined elements Returns Type Description Constraints"
  },
  "api/grammarkdown/define.html": {
    "href": "api/grammarkdown/define.html",
    "title": "Class Define | Grammarkdown API Reference",
    "keywords": "Class Define Inheritance MetaElementBase < SyntaxKind.Define > Define Package : grammarkdown Constructors (constructor)(atToken, defineKeyword, key, valueToken) Constructs a new instance of the Define class Declaration constructor(atToken: Token<SyntaxKind.AtToken>, defineKeyword: Token<SyntaxKind.DefineKeyword>, key: Identifier, valueToken: Token<BooleanKind> | undefined); Parameters Type Name Description Token < SyntaxKind.AtToken > atToken Token < SyntaxKind.DefineKeyword > defineKeyword Identifier key Token < BooleanKind > | undefined valueToken Properties defineKeyword Declaration readonly defineKeyword: Token<SyntaxKind.DefineKeyword>; Property Value Type Description Token < SyntaxKind.DefineKeyword > key Declaration readonly key: Identifier; Property Value Type Description Identifier lastChild Declaration get lastChild(): Node | undefined; Property Value Type Description Node | undefined valueToken Declaration readonly valueToken: Token<BooleanKind> | undefined; Property Value Type Description Token < BooleanKind > | undefined Methods children() Declaration children(): IterableIterator<Node>; Returns Type Description IterableIterator < Node > forEachChild(cbNode) Declaration forEachChild<T>(cbNode: (node: Node) => T | undefined): T | undefined; Parameters Type Name Description (node: Node ) => T | undefined cbNode Returns Type Description T | undefined Type Parameters Name Description T"
  },
  "api/grammarkdown/diagnostic.html": {
    "href": "api/grammarkdown/diagnostic.html",
    "title": "Interface Diagnostic | Grammarkdown API Reference",
    "keywords": "Interface Diagnostic Package : grammarkdown Properties code Declaration code: number; Property Value Type Description number message Declaration message: string; Property Value Type Description string warning Declaration warning?: boolean; Property Value Type Description boolean"
  },
  "api/grammarkdown/diagnosticinfo.html": {
    "href": "api/grammarkdown/diagnosticinfo.html",
    "title": "Interface DiagnosticInfo | Grammarkdown API Reference",
    "keywords": "Interface DiagnosticInfo Package : grammarkdown Properties code Declaration code: number; Property Value Type Description number diagnosticIndex Declaration diagnosticIndex: number; Property Value Type Description number formattedMessage Declaration formattedMessage?: string; Property Value Type Description string message Declaration message: string; Property Value Type Description string messageArguments Declaration messageArguments: any[] | undefined; Property Value Type Description any[] | undefined node Declaration node: Node | undefined; Property Value Type Description Node | undefined pos Declaration pos: number; Property Value Type Description number range Declaration range: Range | undefined; Property Value Type Description Range | undefined sourceFile Declaration sourceFile: SourceFile | undefined; Property Value Type Description SourceFile | undefined warning Declaration warning: boolean; Property Value Type Description boolean"
  },
  "api/grammarkdown/diagnosticmessages.html": {
    "href": "api/grammarkdown/diagnosticmessages.html",
    "title": "Class DiagnosticMessages | Grammarkdown API Reference",
    "keywords": "Class DiagnosticMessages Package : grammarkdown Properties size Declaration get size(): number; Property Value Type Description number Methods [Symbol.iterator]() Declaration [Symbol.iterator](): Generator<DiagnosticInfo | undefined, void, unknown>; Returns Type Description Generator < DiagnosticInfo | undefined, void, unknown> copyFrom(other) Declaration copyFrom(other: DiagnosticMessages): void; Parameters Type Name Description DiagnosticMessages other Returns Type Description void count() Declaration count(): number; Returns Type Description number forEach(callback) Declaration forEach(callback: (message: string, diagnosticIndex: number) => void): void; Parameters Type Name Description (message: string, diagnosticIndex: number) => void callback Returns Type Description void getDiagnostic(diagnosticIndex) Declaration getDiagnostic(diagnosticIndex: number): Diagnostic | undefined; Parameters Type Name Description number diagnosticIndex Returns Type Description Diagnostic | undefined getDiagnosticArguments(diagnosticIndex) Declaration getDiagnosticArguments(diagnosticIndex: number): any[] | undefined; Parameters Type Name Description number diagnosticIndex Returns Type Description any[] | undefined getDiagnosticInfo(diagnosticIndex, options) Declaration getDiagnosticInfo(diagnosticIndex: number, options?: { formatMessage?: boolean; detailedMessage?: boolean; }): DiagnosticInfo | undefined; Parameters Type Name Description number diagnosticIndex { formatMessage?: boolean; detailedMessage?: boolean; } options Returns Type Description DiagnosticInfo | undefined getDiagnosticInfos(options) Declaration getDiagnosticInfos(options?: { formatMessage?: boolean; detailedMessage?: boolean; }): DiagnosticInfo[]; Parameters Type Name Description { formatMessage?: boolean; detailedMessage?: boolean; } options Returns Type Description DiagnosticInfo [] getDiagnosticInfosForSourceFile(sourceFile, options) Declaration getDiagnosticInfosForSourceFile(sourceFile: SourceFile, options?: { formatMessage?: boolean; detailedMessage?: boolean; }): DiagnosticInfo[]; Parameters Type Name Description SourceFile sourceFile { formatMessage?: boolean; detailedMessage?: boolean; } options Returns Type Description DiagnosticInfo [] getDiagnosticNode(diagnosticIndex) Declaration getDiagnosticNode(diagnosticIndex: number): Node | undefined; Parameters Type Name Description number diagnosticIndex Returns Type Description Node | undefined getDiagnosticRange(diagnosticIndex) Declaration getDiagnosticRange(diagnosticIndex: number): Range | undefined; Parameters Type Name Description number diagnosticIndex Returns Type Description Range | undefined getDiagnosticSourceFile(diagnosticIndex) Declaration getDiagnosticSourceFile(diagnosticIndex: number): SourceFile | undefined; Parameters Type Name Description number diagnosticIndex Returns Type Description SourceFile | undefined getMessage(diagnosticIndex, options) Declaration getMessage(diagnosticIndex: number, options?: { detailed?: boolean; }): string; Parameters Type Name Description number diagnosticIndex { detailed?: boolean; } options Returns Type Description string report(pos, message, args) Declaration report(pos: number, message: Diagnostic, ...args: any[]): void; Parameters Type Name Description number pos Diagnostic message any[] args Returns Type Description void reportNode(sourceFile, node, message, args) Declaration reportNode(sourceFile: SourceFile | undefined, node: Node, message: Diagnostic, ...args: any[]): void; Parameters Type Name Description SourceFile | undefined sourceFile Node node Diagnostic message any[] args Returns Type Description void setSourceFile(sourceFile) Declaration setSourceFile(sourceFile: SourceFile): void; Parameters Type Name Description SourceFile sourceFile Returns Type Description void values() Declaration values(): Generator<DiagnosticInfo | undefined, void, unknown>; Returns Type Description Generator < DiagnosticInfo | undefined, void, unknown>"
  },
  "api/grammarkdown/ecmarkupemitter.html": {
    "href": "api/grammarkdown/ecmarkupemitter.html",
    "title": "Class EcmarkupEmitter | Grammarkdown API Reference",
    "keywords": "Class EcmarkupEmitter Inheritance Emitter EcmarkupEmitter Package : grammarkdown Properties extension Declaration protected extension: string; Property Value Type Description string Methods afterEmitNode(node) Declaration protected afterEmitNode(node: Node): void; Parameters Type Name Description Node node Returns Type Description void emitArgument(node) Declaration protected emitArgument(node: Argument): void; Parameters Type Name Description Argument node Returns Type Description void emitArgumentList(node) Declaration protected emitArgumentList(node: ArgumentList): void; Parameters Type Name Description ArgumentList node Returns Type Description void emitButNotSymbol(node) Declaration protected emitButNotSymbol(node: ButNotSymbol): void; Parameters Type Name Description ButNotSymbol node Returns Type Description void emitConstraints(node) Declaration protected emitConstraints(node: Constraints): void; Parameters Type Name Description Constraints node Returns Type Description void emitEmptyAssertion(node) Declaration protected emitEmptyAssertion(node: EmptyAssertion): void; Parameters Type Name Description EmptyAssertion node Returns Type Description void emitLexicalGoalAssertion(node) Declaration protected emitLexicalGoalAssertion(node: LexicalGoalAssertion): void; Parameters Type Name Description LexicalGoalAssertion node Returns Type Description void emitLookaheadAssertion(node) Declaration protected emitLookaheadAssertion(node: LookaheadAssertion): void; Parameters Type Name Description LookaheadAssertion node Returns Type Description void emitNonterminal(node) Declaration protected emitNonterminal(node: Nonterminal): void; Parameters Type Name Description Nonterminal node Returns Type Description void emitNoSymbolHereAssertion(node) Declaration protected emitNoSymbolHereAssertion(node: NoSymbolHereAssertion): void; Parameters Type Name Description NoSymbolHereAssertion node Returns Type Description void emitOneOfList(node) Declaration protected emitOneOfList(node: OneOfList): void; Parameters Type Name Description OneOfList node Returns Type Description void emitOneOfSymbol(node) Declaration protected emitOneOfSymbol(node: OneOfSymbol): void; Parameters Type Name Description OneOfSymbol node Returns Type Description void emitParameter(node) Declaration protected emitParameter(node: Parameter): void; Parameters Type Name Description Parameter node Returns Type Description void emitParameterList(node) Declaration protected emitParameterList(node: ParameterList): void; Parameters Type Name Description ParameterList node Returns Type Description void emitPlaceholder(node) Declaration protected emitPlaceholder(node: LexicalSymbol): void; Parameters Type Name Description LexicalSymbol node Returns Type Description void emitProduction(node) Declaration protected emitProduction(node: Production): void; Parameters Type Name Description Production node Returns Type Description void emitProse(node) Declaration protected emitProse(node: Prose): void; Parameters Type Name Description Prose node Returns Type Description void emitProseAssertion(node) Declaration protected emitProseAssertion(node: ProseAssertion): void; Parameters Type Name Description ProseAssertion node Returns Type Description void emitRightHandSide(node) Declaration protected emitRightHandSide(node: RightHandSide): void; Parameters Type Name Description RightHandSide node Returns Type Description void emitRightHandSideList(node) Declaration protected emitRightHandSideList(node: RightHandSideList): void; Parameters Type Name Description RightHandSideList node Returns Type Description void emitSymbolSet(node) Declaration protected emitSymbolSet(node: SymbolSet): void; Parameters Type Name Description SymbolSet node Returns Type Description void emitSymbolSpan(node) Declaration protected emitSymbolSpan(node: SymbolSpan): void; Parameters Type Name Description SymbolSpan node Returns Type Description void emitTerminal(node) Declaration protected emitTerminal(node: Terminal): void; Parameters Type Name Description Terminal node Returns Type Description void emitTextContent(node) Declaration protected emitTextContent(node: TextContent): void; Parameters Type Name Description TextContent node Returns Type Description void emitUnicodeCharacterLiteral(node) Declaration protected emitUnicodeCharacterLiteral(node: UnicodeCharacterLiteral): void; Parameters Type Name Description UnicodeCharacterLiteral node Returns Type Description void emitUnicodeCharacterRange(node) Declaration protected emitUnicodeCharacterRange(node: UnicodeCharacterRange): void; Parameters Type Name Description UnicodeCharacterRange node Returns Type Description void"
  },
  "api/grammarkdown/emitformat.html": {
    "href": "api/grammarkdown/emitformat.html",
    "title": "Enum EmitFormat | Grammarkdown API Reference",
    "keywords": "Enum EmitFormat Namespace : Assembly : .dll Syntax Fields Name Description ecmarkup html markdown"
  },
  "api/grammarkdown/emitter.html": {
    "href": "api/grammarkdown/emitter.html",
    "title": "Class Emitter | Grammarkdown API Reference",
    "keywords": "Class Emitter Package : grammarkdown Constructors (constructor)(options) Constructs a new instance of the Emitter class Declaration constructor(options: CompilerOptions); Parameters Type Name Description CompilerOptions options Properties extension Declaration protected extension: string; Property Value Type Description string options Declaration protected options: CompilerOptions; Property Value Type Description CompilerOptions resolver Declaration protected resolver: Resolver; Property Value Type Description Resolver writer Declaration protected writer: StringWriter; Property Value Type Description StringWriter Methods afterEmitNode(node) Declaration protected afterEmitNode(node: Node): void; Parameters Type Name Description Node node Returns Type Description void beforeEmitNode(node) Declaration protected beforeEmitNode(node: Node): void; Parameters Type Name Description Node node Returns Type Description void createWriter(options) Declaration protected createWriter(options: CompilerOptions): StringWriter; Parameters Type Name Description CompilerOptions options Returns Type Description StringWriter emit(node, resolver, diagnostics, writeFile, cancelable) Declaration emit(node: SourceFile, resolver: Resolver, diagnostics: DiagnosticMessages, writeFile: (file: string, text: string, cancelToken?: CancelToken) => void | PromiseLike<void>, cancelable?: Cancelable): Promise<void>; Parameters Type Name Description SourceFile node Resolver resolver DiagnosticMessages diagnostics (file: string, text: string, cancelToken?: CancelToken ) => void | PromiseLike <void> writeFile Cancelable cancelable Returns Type Description Promise <void> emit(node, resolver, diagnostics, writeFile, cancelable) Declaration emit(node: SourceFile, resolver: Resolver, diagnostics: DiagnosticMessages, writeFile: (file: string, text: string, cancelToken?: CancellationToken & CancelToken) => void | PromiseLike<void>, cancelable?: CancellationToken | Cancelable): Promise<void>; Parameters Type Name Description SourceFile node Resolver resolver DiagnosticMessages diagnostics (file: string, text: string, cancelToken?: CancellationToken & CancelToken ) => void | PromiseLike <void> writeFile CancellationToken | Cancelable cancelable Returns Type Description Promise <void> emitArgument(node) Declaration protected emitArgument(node: Argument): void; Parameters Type Name Description Argument node Returns Type Description void emitArgumentList(node) Declaration protected emitArgumentList(node: ArgumentList): void; Parameters Type Name Description ArgumentList node Returns Type Description void emitButNotSymbol(node) Declaration protected emitButNotSymbol(node: ButNotSymbol): void; Parameters Type Name Description ButNotSymbol node Returns Type Description void emitConstraints(node) Declaration protected emitConstraints(node: Constraints): void; Parameters Type Name Description Constraints node Returns Type Description void emitEmptyAssertion(node) Declaration protected emitEmptyAssertion(node: EmptyAssertion): void; Parameters Type Name Description EmptyAssertion node Returns Type Description void emitHtmlTrivia(range) Declaration protected emitHtmlTrivia(range: TextRange): void; Parameters Type Name Description TextRange range Returns Type Description void emitIdentifier(node) Declaration protected emitIdentifier(node: Identifier): void; Parameters Type Name Description Identifier node Returns Type Description void emitImport(node) Declaration protected emitImport(node: Import): void; Parameters Type Name Description Import node Returns Type Description void emitKeyword(node) Declaration protected emitKeyword(node: Node): void; Parameters Type Name Description Node node Returns Type Description void emitLeadingHtmlTriviaOfNode(node) Declaration protected emitLeadingHtmlTriviaOfNode(node: Node): void; Parameters Type Name Description Node node Returns Type Description void emitLexicalGoalAssertion(node) Declaration protected emitLexicalGoalAssertion(node: LexicalGoalAssertion): void; Parameters Type Name Description LexicalGoalAssertion node Returns Type Description void emitLookaheadAssertion(node) Declaration protected emitLookaheadAssertion(node: LookaheadAssertion): void; Parameters Type Name Description LookaheadAssertion node Returns Type Description void emitNode(node) Declaration protected emitNode(node: Node | undefined): void; Parameters Type Name Description Node | undefined node Returns Type Description void emitNonterminal(node) Declaration protected emitNonterminal(node: Nonterminal): void; Parameters Type Name Description Nonterminal node Returns Type Description void emitNoSymbolHereAssertion(node) Declaration protected emitNoSymbolHereAssertion(node: NoSymbolHereAssertion): void; Parameters Type Name Description NoSymbolHereAssertion node Returns Type Description void emitOneOfList(node) Declaration protected emitOneOfList(node: OneOfList): void; Parameters Type Name Description OneOfList node Returns Type Description void emitOneOfSymbol(node) Declaration protected emitOneOfSymbol(node: OneOfSymbol): void; Parameters Type Name Description OneOfSymbol node Returns Type Description void emitParameter(node) Declaration protected emitParameter(node: Parameter): void; Parameters Type Name Description Parameter node Returns Type Description void emitParameterList(node) Declaration protected emitParameterList(node: ParameterList): void; Parameters Type Name Description ParameterList node Returns Type Description void emitPlaceholder(node) Declaration protected emitPlaceholder(node: PlaceholderSymbol): void; Parameters Type Name Description PlaceholderSymbol node Returns Type Description void emitProduction(node) Declaration protected emitProduction(node: Production): void; Parameters Type Name Description Production node Returns Type Description void emitProse(node) Declaration protected emitProse(node: Prose): void; Parameters Type Name Description Prose node Returns Type Description void emitProseAssertion(node) Declaration protected emitProseAssertion(node: ProseAssertion): void; Parameters Type Name Description ProseAssertion node Returns Type Description void emitProseFragmentLiteral(node) Declaration protected emitProseFragmentLiteral(node: ProseFragmentLiteral): void; Parameters Type Name Description ProseFragmentLiteral node Returns Type Description void emitRightHandSide(node) Declaration protected emitRightHandSide(node: RightHandSide): void; Parameters Type Name Description RightHandSide node Returns Type Description void emitRightHandSideList(node) Declaration protected emitRightHandSideList(node: RightHandSideList): void; Parameters Type Name Description RightHandSideList node Returns Type Description void emitSourceFile(node) Declaration protected emitSourceFile(node: SourceFile): void; Parameters Type Name Description SourceFile node Returns Type Description void emitString(node, resolver, diagnostics, cancelable) Declaration emitString(node: SourceFile, resolver: Resolver, diagnostics: DiagnosticMessages, cancelable?: Cancelable): string; Parameters Type Name Description SourceFile node Resolver resolver DiagnosticMessages diagnostics Cancelable cancelable Returns Type Description string emitString(node, resolver, diagnostics, cancelable) Declaration emitString(node: SourceFile, resolver: Resolver, diagnostics: DiagnosticMessages, cancelable?: CancellationToken | Cancelable): string; Parameters Type Name Description SourceFile node Resolver resolver DiagnosticMessages diagnostics CancellationToken | Cancelable cancelable Returns Type Description string emitSymbolSet(node) Declaration protected emitSymbolSet(node: SymbolSet): void; Parameters Type Name Description SymbolSet node Returns Type Description void emitSymbolSpan(node) Declaration protected emitSymbolSpan(node: SymbolSpan): void; Parameters Type Name Description SymbolSpan node Returns Type Description void emitSync(node, resolver, diagnostics, writeFile, cancelable) Declaration emitSync(node: SourceFile, resolver: Resolver, diagnostics: DiagnosticMessages, writeFile: (file: string, text: string, cancelToken?: CancelToken) => void, cancelable?: Cancelable): void; Parameters Type Name Description SourceFile node Resolver resolver DiagnosticMessages diagnostics (file: string, text: string, cancelToken?: CancelToken ) => void writeFile Cancelable cancelable Returns Type Description void emitSync(node, resolver, diagnostics, writeFile, cancelable) Declaration emitSync(node: SourceFile, resolver: Resolver, diagnostics: DiagnosticMessages, writeFile: (file: string, text: string, cancelToken?: CancellationToken & CancelToken) => void, cancelable?: CancellationToken | Cancelable): void; Parameters Type Name Description SourceFile node Resolver resolver DiagnosticMessages diagnostics (file: string, text: string, cancelToken?: CancellationToken & CancelToken ) => void writeFile CancellationToken | Cancelable cancelable Returns Type Description void emitTerminal(node) Declaration protected emitTerminal(node: Terminal): void; Parameters Type Name Description Terminal node Returns Type Description void emitTextContent(node) Declaration protected emitTextContent(node: TextContent): void; Parameters Type Name Description TextContent node Returns Type Description void emitToken(node) Declaration protected emitToken(node: Node | undefined): void; Parameters Type Name Description Node | undefined node Returns Type Description void emitTrailingHtmlTriviaOfNode(node) Declaration protected emitTrailingHtmlTriviaOfNode(node: Node): void; Parameters Type Name Description Node node Returns Type Description void emitUnicodeCharacterLiteral(node) Declaration protected emitUnicodeCharacterLiteral(node: UnicodeCharacterLiteral): void; Parameters Type Name Description UnicodeCharacterLiteral node Returns Type Description void emitUnicodeCharacterRange(node) Declaration protected emitUnicodeCharacterRange(node: UnicodeCharacterRange): void; Parameters Type Name Description UnicodeCharacterRange node Returns Type Description void encode(text) Declaration protected encode(text: string): string; Parameters Type Name Description string text Returns Type Description string getOutputFilename(node) Declaration protected getOutputFilename(node: SourceFile): string; Parameters Type Name Description SourceFile node Returns Type Description string"
  },
  "api/grammarkdown/emptyassertion.html": {
    "href": "api/grammarkdown/emptyassertion.html",
    "title": "Class EmptyAssertion | Grammarkdown API Reference",
    "keywords": "Class EmptyAssertion Inheritance AssertionBase < SyntaxKind.EmptyAssertion , SyntaxKind.OpenBracketToken > EmptyAssertion Package : grammarkdown Constructors (constructor)(openBracketToken, emptyKeyword, closeBracketToken) Constructs a new instance of the EmptyAssertion class Declaration constructor(openBracketToken: Token<SyntaxKind.OpenBracketToken>, emptyKeyword: Token<SyntaxKind.EmptyKeyword>, closeBracketToken: Token<SyntaxKind.CloseBracketToken> | undefined); Parameters Type Name Description Token < SyntaxKind.OpenBracketToken > openBracketToken Token < SyntaxKind.EmptyKeyword > emptyKeyword Token < SyntaxKind.CloseBracketToken > | undefined closeBracketToken Properties emptyKeyword Declaration readonly emptyKeyword: Token<SyntaxKind.EmptyKeyword>; Property Value Type Description Token < SyntaxKind.EmptyKeyword > lastChild Declaration get lastChild(): Node | undefined; Property Value Type Description Node | undefined Methods children() Declaration children(): IterableIterator<Node>; Returns Type Description IterableIterator < Node > forEachChild(cbNode) Declaration forEachChild<T>(cbNode: (node: Node) => T | undefined): T | undefined; Parameters Type Name Description (node: Node ) => T | undefined cbNode Returns Type Description T | undefined Type Parameters Name Description T"
  },
  "api/grammarkdown/grammar.html": {
    "href": "api/grammarkdown/grammar.html",
    "title": "Class Grammar | Grammarkdown API Reference",
    "keywords": "Class Grammar Package : grammarkdown Constructors (constructor)(rootNames, options, host) Constructs a new instance of the Grammar class Declaration constructor(rootNames: Iterable<string>, options?: CompilerOptions, host?: Host | SyncHost | AsyncHost); Parameters Type Name Description Iterable <string> rootNames CompilerOptions options Host | SyncHost | AsyncHost host Properties binder Declaration protected get binder(): Binder; Property Value Type Description Binder checker Declaration protected get checker(): Checker; Property Value Type Description Checker diagnostics Declaration diagnostics: DiagnosticMessages; Property Value Type Description DiagnosticMessages emitter Declaration protected get emitter(): Emitter; Property Value Type Description Emitter host Declaration readonly host: Host | SyncHost | AsyncHost; Property Value Type Description Host | SyncHost | AsyncHost isBound Declaration get isBound(): boolean; Property Value Type Description boolean isParsed Declaration get isParsed(): boolean; Property Value Type Description boolean options Declaration options: CompilerOptions; Property Value Type Description CompilerOptions resolver Declaration get resolver(): Resolver; Property Value Type Description Resolver rootFiles Declaration get rootFiles(): ReadonlyArray<SourceFile>; Property Value Type Description ReadonlyArray < SourceFile > sourceFiles Declaration get sourceFiles(): ReadonlyArray<SourceFile>; Property Value Type Description ReadonlyArray < SourceFile > Methods bind(cancelable) Declaration bind(cancelable?: Cancelable): Promise<void>; Parameters Type Name Description Cancelable cancelable Returns Type Description Promise <void> bind(cancelable) Declaration bind(cancelable?: CancellationToken | Cancelable): Promise<void>; Parameters Type Name Description CancellationToken | Cancelable cancelable Returns Type Description Promise <void> bindSync(cancelable) Declaration bindSync(cancelable?: Cancelable): void; Parameters Type Name Description Cancelable cancelable Returns Type Description void bindSync(cancelable) Declaration bindSync(cancelable?: CancellationToken | Cancelable): void; Parameters Type Name Description CancellationToken | Cancelable cancelable Returns Type Description void check(sourceFile, cancelable) Declaration check(sourceFile?: SourceFile, cancelable?: Cancelable): Promise<void>; Parameters Type Name Description SourceFile sourceFile Cancelable cancelable Returns Type Description Promise <void> check(sourceFile, cancelable) Declaration check(sourceFile?: SourceFile, cancelable?: CancellationToken | Cancelable): Promise<void>; Parameters Type Name Description SourceFile sourceFile CancellationToken | Cancelable cancelable Returns Type Description Promise <void> checkSync(sourceFile, cancelable) Declaration checkSync(sourceFile?: SourceFile, cancelable?: Cancelable): void; Parameters Type Name Description SourceFile sourceFile Cancelable cancelable Returns Type Description void checkSync(sourceFile, cancelable) Declaration checkSync(sourceFile?: SourceFile, cancelable?: CancellationToken | Cancelable): void; Parameters Type Name Description SourceFile sourceFile CancellationToken | Cancelable cancelable Returns Type Description void convert(content, options, hostFallback, cancelable) Declaration static convert(content: string, options?: CompilerOptions, hostFallback?: Host | SyncHost | AsyncHost, cancelable?: Cancelable): string; Parameters Type Name Description string content CompilerOptions options Host | SyncHost | AsyncHost hostFallback Cancelable cancelable Returns Type Description string convert(content, options, hostFallback, cancelable) Declaration static convert(content: string, options?: CompilerOptions, hostFallback?: Host | SyncHost | AsyncHost, cancelable?: CancellationToken | Cancelable): string; Parameters Type Name Description string content CompilerOptions options Host | SyncHost | AsyncHost hostFallback CancellationToken | Cancelable cancelable Returns Type Description string createBinder(options) Declaration protected createBinder(options: CompilerOptions): Binder; Parameters Type Name Description CompilerOptions options Returns Type Description Binder createChecker(options) Declaration protected createChecker(options: CompilerOptions): Checker; Parameters Type Name Description CompilerOptions options Returns Type Description Checker createEmitter(options) Declaration protected createEmitter(options: CompilerOptions): Emitter; Parameters Type Name Description CompilerOptions options Returns Type Description Emitter createResolver(bindings) Declaration protected createResolver(bindings: BindingTable): Resolver; Parameters Type Name Description BindingTable bindings Returns Type Description Resolver emit(sourceFile, writeFile, cancelable) Declaration emit(sourceFile?: SourceFile, writeFile?: (file: string, output: string, cancelToken?: CancelToken) => void | PromiseLike<void>, cancelable?: Cancelable): Promise<void>; Parameters Type Name Description SourceFile sourceFile (file: string, output: string, cancelToken?: CancelToken ) => void | PromiseLike <void> writeFile Cancelable cancelable Returns Type Description Promise <void> emit(sourceFile, writeFile, cancelable) Declaration emit(sourceFile?: SourceFile, writeFile?: (file: string, output: string) => void | PromiseLike<void>, cancelable?: CancellationToken | Cancelable): Promise<void>; Parameters Type Name Description SourceFile sourceFile (file: string, output: string) => void | PromiseLike <void> writeFile CancellationToken | Cancelable cancelable Returns Type Description Promise <void> emitString(sourceFile, cancelable) Declaration emitString(sourceFile: SourceFile, cancelable?: Cancelable): Promise<string>; Parameters Type Name Description SourceFile sourceFile Cancelable cancelable Returns Type Description Promise <string> emitString(sourceFile, cancelable) Declaration emitString(sourceFile: SourceFile, cancelable?: CancellationToken | Cancelable): Promise<string>; Parameters Type Name Description SourceFile sourceFile CancellationToken | Cancelable cancelable Returns Type Description Promise <string> emitStringSync(sourceFile, cancelable) Declaration emitStringSync(sourceFile: SourceFile, cancelable?: Cancelable): string; Parameters Type Name Description SourceFile sourceFile Cancelable cancelable Returns Type Description string emitStringSync(sourceFile, cancelable) Declaration emitStringSync(sourceFile: SourceFile, cancelable?: CancellationToken | Cancelable): string; Parameters Type Name Description SourceFile sourceFile CancellationToken | Cancelable cancelable Returns Type Description string emitSync(sourceFile, writeFile, cancelable) Declaration emitSync(sourceFile?: SourceFile, writeFile?: (file: string, output: string, cancelToken?: CancelToken) => void, cancelable?: Cancelable): void; Parameters Type Name Description SourceFile sourceFile (file: string, output: string, cancelToken?: CancelToken ) => void writeFile Cancelable cancelable Returns Type Description void emitSync(sourceFile, writeFile, cancelable) Declaration emitSync(sourceFile?: SourceFile, writeFile?: (file: string, output: string) => void, cancelable?: CancellationToken | Cancelable): void; Parameters Type Name Description SourceFile sourceFile (file: string, output: string) => void writeFile CancellationToken | Cancelable cancelable Returns Type Description void getSourceFile(file) Declaration getSourceFile(file: string): SourceFile | undefined; Parameters Type Name Description string file Returns Type Description SourceFile | undefined parse(cancelable) Declaration parse(cancelable?: Cancelable): Promise<void>; Parameters Type Name Description Cancelable cancelable Returns Type Description Promise <void> parse(cancelable) Declaration parse(cancelable?: CancellationToken | Cancelable): Promise<void>; Parameters Type Name Description CancellationToken | Cancelable cancelable Returns Type Description Promise <void> parseSync(cancelable) Declaration parseSync(cancelable?: Cancelable): void; Parameters Type Name Description Cancelable cancelable Returns Type Description void parseSync(cancelable) Declaration parseSync(cancelable?: CancellationToken | Cancelable): void; Parameters Type Name Description CancellationToken | Cancelable cancelable Returns Type Description void readFile(file, cancelToken) Declaration protected readFile(file: string, cancelToken?: CancelToken): Promise<string | undefined> | string | undefined; Parameters Type Name Description string file CancelToken cancelToken Returns Type Description Promise <string | undefined> | string | undefined readFileSync(file) Declaration protected readFileSync(file: string): Promise<string | undefined> | string | undefined; Parameters Type Name Description string file Returns Type Description Promise <string | undefined> | string | undefined writeFile(file, content, cancelToken) Declaration protected writeFile(file: string, content: string, cancelToken?: CancelToken): void | Promise<void>; Parameters Type Name Description string file string content CancelToken cancelToken Returns Type Description void | Promise <void> writeFileSync(file, content) Declaration protected writeFileSync(file: string, content: string): void; Parameters Type Name Description string file string content Returns Type Description void"
  },
  "api/grammarkdown/host.html": {
    "href": "api/grammarkdown/host.html",
    "title": "Class Host | Grammarkdown API Reference",
    "keywords": "Class Host Inheritance HostBase Host Package : grammarkdown Constructors (constructor)({ readFile, readFileSync, writeFile, writeFileSync, ...baseOptions }) Constructs a new instance of the Host class Declaration constructor({ readFile, readFileSync, writeFile, writeFileSync, ...baseOptions }?: HostOptions); Parameters Type Name Description HostOptions { readFile, readFileSync, writeFile, writeFileSync, ...baseOptions } Methods getSourceFile(file, cancelable) Declaration getSourceFile(file: string, cancelable?: Cancelable): Promise<SourceFile | undefined>; Parameters Type Name Description string file Cancelable cancelable Returns Type Description Promise < SourceFile | undefined> getSourceFile(file, cancelable) Declaration getSourceFile(file: string, cancelable?: CancellationToken | Cancelable): Promise<SourceFile | undefined>; Parameters Type Name Description string file CancellationToken | Cancelable cancelable Returns Type Description Promise < SourceFile | undefined> getSourceFileSync(file, cancelable) Declaration getSourceFileSync(file: string, cancelable?: Cancelable): SourceFile | undefined; Parameters Type Name Description string file Cancelable cancelable Returns Type Description SourceFile | undefined getSourceFileSync(file, cancelable) Declaration getSourceFileSync(file: string, cancelable?: CancellationToken | Cancelable): SourceFile | undefined; Parameters Type Name Description string file CancellationToken | Cancelable cancelable Returns Type Description SourceFile | undefined readFile(file, cancelable) Declaration readFile(file: string, cancelable?: Cancelable): Promise<string | undefined>; Parameters Type Name Description string file Cancelable cancelable Returns Type Description Promise <string | undefined> readFile(file, cancelable) Declaration readFile(file: string, cancelable?: CancellationToken | Cancelable): Promise<string | undefined>; Parameters Type Name Description string file CancellationToken | Cancelable cancelable Returns Type Description Promise <string | undefined> readFileSync(file, cancelable) Declaration readFileSync(file: string, cancelable?: Cancelable): string | undefined; Parameters Type Name Description string file Cancelable cancelable Returns Type Description string | undefined readFileSync(file, cancelable) Declaration readFileSync(file: string, cancelable?: CancellationToken | Cancelable): string | undefined; Parameters Type Name Description string file CancellationToken | Cancelable cancelable Returns Type Description string | undefined writeFile(file, text, cancelable) Declaration writeFile(file: string, text: string, cancelable?: Cancelable): Promise<void>; Parameters Type Name Description string file string text Cancelable cancelable Returns Type Description Promise <void> writeFile(file, text, cancelable) Declaration writeFile(file: string, text: string, cancelable?: CancellationToken | Cancelable): Promise<void>; Parameters Type Name Description string file string text CancellationToken | Cancelable cancelable Returns Type Description Promise <void> writeFileSync(file, text, cancelable) Declaration writeFileSync(file: string, text: string, cancelable?: Cancelable): void; Parameters Type Name Description string file string text Cancelable cancelable Returns Type Description void writeFileSync(file, text, cancelable) Declaration writeFileSync(file: string, text: string, cancelable?: CancellationToken | Cancelable): void; Parameters Type Name Description string file string text CancellationToken | Cancelable cancelable Returns Type Description void"
  },
  "api/grammarkdown/hostbase.html": {
    "href": "api/grammarkdown/hostbase.html",
    "title": "Class HostBase | Grammarkdown API Reference",
    "keywords": "Class HostBase Package : grammarkdown Constructors (constructor)({ ignoreCase, knownGrammars, useBuiltinGrammars }) Constructs a new instance of the HostBase class Declaration constructor({ ignoreCase, knownGrammars, useBuiltinGrammars }?: HostBaseOptions); Parameters Type Name Description HostBaseOptions { ignoreCase, knownGrammars, useBuiltinGrammars } Properties ignoreCase Declaration readonly ignoreCase: boolean; Property Value Type Description boolean parser Declaration protected get parser(): Parser; Property Value Type Description Parser Methods createParser() Declaration protected createParser(): Parser; Returns Type Description Parser normalizeFile(file) Declaration normalizeFile(file: string): string; Parameters Type Name Description string file Returns Type Description string parseSourceFile(file, text, cancelable) Declaration parseSourceFile(file: string, text: string, cancelable?: Cancelable): SourceFile; Parameters Type Name Description string file string text Cancelable cancelable Returns Type Description SourceFile parseSourceFile(file, text, cancelable) Declaration parseSourceFile(file: string, text: string, cancelable?: CancellationToken | Cancelable): SourceFile; Parameters Type Name Description string file string text CancellationToken | Cancelable cancelable Returns Type Description SourceFile registerKnownGrammar(name, file) Declaration registerKnownGrammar(name: string, file: string): void; Parameters Type Name Description string name string file Returns Type Description void resolveBuiltInGrammar(name) Declaration protected resolveBuiltInGrammar(name: string): string | undefined; Parameters Type Name Description string name Returns Type Description string | undefined resolveFile(file, referer) Declaration resolveFile(file: string, referer?: string): string; Parameters Type Name Description string file string referer Returns Type Description string resolveKnownGrammar(name) Declaration resolveKnownGrammar(name: string): string | undefined; Parameters Type Name Description string name Returns Type Description string | undefined"
  },
  "api/grammarkdown/hostbaseoptions.html": {
    "href": "api/grammarkdown/hostbaseoptions.html",
    "title": "Interface HostBaseOptions | Grammarkdown API Reference",
    "keywords": "Interface HostBaseOptions Package : grammarkdown Properties ignoreCase Declaration ignoreCase?: boolean; Property Value Type Description boolean knownGrammars Declaration knownGrammars?: Record<string, string>; Property Value Type Description Record <string, string> useBuiltinGrammars Declaration useBuiltinGrammars?: boolean; Property Value Type Description boolean"
  },
  "api/grammarkdown/hostoptions.html": {
    "href": "api/grammarkdown/hostoptions.html",
    "title": "Interface HostOptions | Grammarkdown API Reference",
    "keywords": "Interface HostOptions Inheritance HostBaseOptions HostOptions Package : grammarkdown Properties readFile Declaration readFile?: ReadFileCallback | LegacyReadFileCallback; Property Value Type Description ReadFileCallback | LegacyReadFileCallback readFileSync Declaration readFileSync?: ReadFileSyncCallback | LegacyReadFileSyncCallback; Property Value Type Description ReadFileSyncCallback | LegacyReadFileSyncCallback writeFile Declaration writeFile?: WriteFileCallback | LegacyWriteFileCallback; Property Value Type Description WriteFileCallback | LegacyWriteFileCallback writeFileSync Declaration writeFileSync?: WriteFileSyncCallback | LegacyWriteFileSyncCallback; Property Value Type Description WriteFileSyncCallback | LegacyWriteFileSyncCallback"
  },
  "api/grammarkdown/htmlclosetagtrivia.html": {
    "href": "api/grammarkdown/htmlclosetagtrivia.html",
    "title": "Class HtmlCloseTagTrivia | Grammarkdown API Reference",
    "keywords": "Class HtmlCloseTagTrivia Inheritance HtmlTriviaBase < SyntaxKind.HtmlCloseTagTrivia > HtmlCloseTagTrivia Package : grammarkdown Constructors (constructor)(tagName) Constructs a new instance of the HtmlCloseTagTrivia class Declaration constructor(tagName: string); Parameters Type Name Description string tagName"
  },
  "api/grammarkdown/htmlemitter.html": {
    "href": "api/grammarkdown/htmlemitter.html",
    "title": "Class HtmlEmitter | Grammarkdown API Reference",
    "keywords": "Class HtmlEmitter Inheritance Emitter HtmlEmitter Package : grammarkdown Properties extension Declaration protected extension: string; Property Value Type Description string Methods afterEmitNode(node) Declaration protected afterEmitNode(node: Node): void; Parameters Type Name Description Node node Returns Type Description void emitArgument(node) Declaration protected emitArgument(node: Argument): void; Parameters Type Name Description Argument node Returns Type Description void emitArgumentList(node) Declaration protected emitArgumentList(node: ArgumentList): void; Parameters Type Name Description ArgumentList node Returns Type Description void emitButNotSymbol(node) Declaration protected emitButNotSymbol(node: ButNotSymbol): void; Parameters Type Name Description ButNotSymbol node Returns Type Description void emitConstraints(node) Declaration protected emitConstraints(node: Constraints): void; Parameters Type Name Description Constraints node Returns Type Description void emitEmptyAssertion(node) Declaration protected emitEmptyAssertion(node: EmptyAssertion): void; Parameters Type Name Description EmptyAssertion node Returns Type Description void emitLexicalGoalAssertion(node) Declaration protected emitLexicalGoalAssertion(node: LexicalGoalAssertion): void; Parameters Type Name Description LexicalGoalAssertion node Returns Type Description void emitLookaheadAssertion(node) Declaration protected emitLookaheadAssertion(node: LookaheadAssertion): void; Parameters Type Name Description LookaheadAssertion node Returns Type Description void emitNonterminal(node) Declaration protected emitNonterminal(node: Nonterminal): void; Parameters Type Name Description Nonterminal node Returns Type Description void emitNoSymbolHereAssertion(node) Declaration protected emitNoSymbolHereAssertion(node: NoSymbolHereAssertion): void; Parameters Type Name Description NoSymbolHereAssertion node Returns Type Description void emitOneOfList(node) Declaration protected emitOneOfList(node: OneOfList): void; Parameters Type Name Description OneOfList node Returns Type Description void emitOneOfSymbol(node) Declaration protected emitOneOfSymbol(node: OneOfSymbol): void; Parameters Type Name Description OneOfSymbol node Returns Type Description void emitParameter(node) Declaration protected emitParameter(node: Parameter): void; Parameters Type Name Description Parameter node Returns Type Description void emitParameterList(node) Declaration protected emitParameterList(node: ParameterList): void; Parameters Type Name Description ParameterList node Returns Type Description void emitPlaceholder(node) Declaration protected emitPlaceholder(node: LexicalSymbol): void; Parameters Type Name Description LexicalSymbol node Returns Type Description void emitProduction(node) Declaration protected emitProduction(node: Production): void; Parameters Type Name Description Production node Returns Type Description void emitProse(node) Declaration protected emitProse(node: Prose): void; Parameters Type Name Description Prose node Returns Type Description void emitProseAssertion(node) Declaration protected emitProseAssertion(node: ProseAssertion): void; Parameters Type Name Description ProseAssertion node Returns Type Description void emitRightHandSide(node) Declaration protected emitRightHandSide(node: RightHandSide): void; Parameters Type Name Description RightHandSide node Returns Type Description void emitRightHandSideList(node) Declaration protected emitRightHandSideList(node: RightHandSideList): void; Parameters Type Name Description RightHandSideList node Returns Type Description void emitSourceFile(node) Declaration protected emitSourceFile(node: SourceFile): void; Parameters Type Name Description SourceFile node Returns Type Description void emitSymbolSet(node) Declaration protected emitSymbolSet(node: SymbolSet): void; Parameters Type Name Description SymbolSet node Returns Type Description void emitSymbolSpan(node) Declaration protected emitSymbolSpan(node: SymbolSpan): void; Parameters Type Name Description SymbolSpan node Returns Type Description void emitTerminal(node) Declaration protected emitTerminal(node: Terminal): void; Parameters Type Name Description Terminal node Returns Type Description void emitTextContent(node) Declaration protected emitTextContent(node: TextContent): void; Parameters Type Name Description TextContent node Returns Type Description void emitUnicodeCharacterLiteral(node) Declaration protected emitUnicodeCharacterLiteral(node: UnicodeCharacterLiteral): void; Parameters Type Name Description UnicodeCharacterLiteral node Returns Type Description void emitUnicodeCharacterRange(node) Declaration protected emitUnicodeCharacterRange(node: UnicodeCharacterRange): void; Parameters Type Name Description UnicodeCharacterRange node Returns Type Description void"
  },
  "api/grammarkdown/htmlopentagtrivia.html": {
    "href": "api/grammarkdown/htmlopentagtrivia.html",
    "title": "Class HtmlOpenTagTrivia | Grammarkdown API Reference",
    "keywords": "Class HtmlOpenTagTrivia Inheritance HtmlTriviaBase < SyntaxKind.HtmlOpenTagTrivia > HtmlOpenTagTrivia Package : grammarkdown Constructors (constructor)(tagName) Constructs a new instance of the HtmlOpenTagTrivia class Declaration constructor(tagName: string); Parameters Type Name Description string tagName"
  },
  "api/grammarkdown/htmltriviabase.html": {
    "href": "api/grammarkdown/htmltriviabase.html",
    "title": "Class HtmlTriviaBase | Grammarkdown API Reference",
    "keywords": "Class HtmlTriviaBase Inheritance TriviaBase <TKind> HtmlTriviaBase Package : grammarkdown Constructors (constructor)(kind, tagName) Constructs a new instance of the HtmlTriviaBase class Declaration constructor(kind: TKind, tagName: string); Parameters Type Name Description TKind kind string tagName Properties tagName Declaration readonly tagName: string; Property Value Type Description string"
  },
  "api/grammarkdown/identifier.html": {
    "href": "api/grammarkdown/identifier.html",
    "title": "Class Identifier | Grammarkdown API Reference",
    "keywords": "Class Identifier Inheritance Node < SyntaxKind.Identifier > Identifier Package : grammarkdown Constructors (constructor)(text) Constructs a new instance of the Identifier class Declaration constructor(text: string | undefined); Parameters Type Name Description string | undefined text Properties text Declaration readonly text: string | undefined; Property Value Type Description string | undefined"
  },
  "api/grammarkdown/import.html": {
    "href": "api/grammarkdown/import.html",
    "title": "Class Import | Grammarkdown API Reference",
    "keywords": "Class Import Inheritance MetaElementBase < SyntaxKind.Import > Import Package : grammarkdown Constructors (constructor)(atToken, importKeyword, path) Constructs a new instance of the Import class Declaration constructor(atToken: Token<SyntaxKind.AtToken>, importKeyword: Token<SyntaxKind.ImportKeyword>, path: StringLiteral | undefined); Parameters Type Name Description Token < SyntaxKind.AtToken > atToken Token < SyntaxKind.ImportKeyword > importKeyword StringLiteral | undefined path Properties importKeyword Declaration readonly importKeyword: Token<SyntaxKind.ImportKeyword>; Property Value Type Description Token < SyntaxKind.ImportKeyword > lastChild Declaration get lastChild(): Node | undefined; Property Value Type Description Node | undefined path Declaration readonly path: StringLiteral | undefined; Property Value Type Description StringLiteral | undefined Methods children() Declaration children(): IterableIterator<Node>; Returns Type Description IterableIterator < Node > forEachChild(cbNode) Declaration forEachChild<T>(cbNode: (node: Node) => T | undefined): T | undefined; Parameters Type Name Description (node: Node ) => T | undefined cbNode Returns Type Description T | undefined Type Parameters Name Description T"
  },
  "api/grammarkdown/invalidassertion.html": {
    "href": "api/grammarkdown/invalidassertion.html",
    "title": "Class InvalidAssertion | Grammarkdown API Reference",
    "keywords": "Class InvalidAssertion Inheritance AssertionBase < SyntaxKind.InvalidAssertion , SyntaxKind.OpenBracketToken > InvalidAssertion Package : grammarkdown Constructors (constructor)(openBracketToken, closeBracketToken) Constructs a new instance of the InvalidAssertion class Declaration constructor(openBracketToken: Token<SyntaxKind.OpenBracketToken>, closeBracketToken: Token<SyntaxKind.CloseBracketToken> | undefined); Parameters Type Name Description Token < SyntaxKind.OpenBracketToken > openBracketToken Token < SyntaxKind.CloseBracketToken > | undefined closeBracketToken Properties lastChild Declaration get lastChild(): Node | undefined; Property Value Type Description Node | undefined Methods children() Declaration children(): IterableIterator<Node>; Returns Type Description IterableIterator < Node > forEachChild(cbNode) Declaration forEachChild<T>(cbNode: (node: Node) => T | undefined): T | undefined; Parameters Type Name Description (node: Node ) => T | undefined cbNode Returns Type Description T | undefined Type Parameters Name Description T"
  },
  "api/grammarkdown/invalidsymbol.html": {
    "href": "api/grammarkdown/invalidsymbol.html",
    "title": "Class InvalidSymbol | Grammarkdown API Reference",
    "keywords": "Class InvalidSymbol Inheritance LexicalSymbolBase < SyntaxKind.InvalidSymbol > InvalidSymbol Package : grammarkdown Constructors (constructor)() Constructs a new instance of the InvalidSymbol class Declaration constructor();"
  },
  "api/grammarkdown/lexicalgoalassertion.html": {
    "href": "api/grammarkdown/lexicalgoalassertion.html",
    "title": "Class LexicalGoalAssertion | Grammarkdown API Reference",
    "keywords": "Class LexicalGoalAssertion Inheritance AssertionBase < SyntaxKind.LexicalGoalAssertion , SyntaxKind.OpenBracketToken > LexicalGoalAssertion Package : grammarkdown Constructors (constructor)(openBracketToken, lexicalKeyword, goalKeyword, symbol, closeBracketToken) Constructs a new instance of the LexicalGoalAssertion class Declaration constructor(openBracketToken: Token<SyntaxKind.OpenBracketToken>, lexicalKeyword: Token<SyntaxKind.LexicalKeyword>, goalKeyword: Token<SyntaxKind.GoalKeyword> | undefined, symbol: Identifier | undefined, closeBracketToken: Token<SyntaxKind.CloseBracketToken> | undefined); Parameters Type Name Description Token < SyntaxKind.OpenBracketToken > openBracketToken Token < SyntaxKind.LexicalKeyword > lexicalKeyword Token < SyntaxKind.GoalKeyword > | undefined goalKeyword Identifier | undefined symbol Token < SyntaxKind.CloseBracketToken > | undefined closeBracketToken Properties goalKeyword Declaration readonly goalKeyword: Token<SyntaxKind.GoalKeyword> | undefined; Property Value Type Description Token < SyntaxKind.GoalKeyword > | undefined lastChild Declaration get lastChild(): Node | undefined; Property Value Type Description Node | undefined lexicalKeyword Declaration readonly lexicalKeyword: Token<SyntaxKind.LexicalKeyword>; Property Value Type Description Token < SyntaxKind.LexicalKeyword > symbol Declaration readonly symbol: Identifier | undefined; Property Value Type Description Identifier | undefined Methods children() Declaration children(): IterableIterator<Node>; Returns Type Description IterableIterator < Node > forEachChild(cbNode) Declaration forEachChild<T>(cbNode: (node: Node) => T | undefined): T | undefined; Parameters Type Name Description (node: Node ) => T | undefined cbNode Returns Type Description T | undefined Type Parameters Name Description T update(symbol) Declaration update(symbol: Identifier | undefined): LexicalGoalAssertion; Parameters Type Name Description Identifier | undefined symbol Returns Type Description LexicalGoalAssertion"
  },
  "api/grammarkdown/lexicalsymbolbase.html": {
    "href": "api/grammarkdown/lexicalsymbolbase.html",
    "title": "Class LexicalSymbolBase | Grammarkdown API Reference",
    "keywords": "Class LexicalSymbolBase Inheritance Node <TKind> LexicalSymbolBase Package : grammarkdown"
  },
  "api/grammarkdown/linemap.html": {
    "href": "api/grammarkdown/linemap.html",
    "title": "Class LineMap | Grammarkdown API Reference",
    "keywords": "Class LineMap Package : grammarkdown Constructors (constructor)(text) Constructs a new instance of the LineMap class Declaration constructor(text: string); Parameters Type Name Description string text Properties lineCount Declaration get lineCount(): number; Property Value Type Description number Methods formatOffset(pos) Declaration formatOffset(pos: number): string; Parameters Type Name Description number pos Returns Type Description string offsetAt(position) Declaration offsetAt(position: Position): number; Parameters Type Name Description Position position Returns Type Description number positionAt(offset) Declaration positionAt(offset: number): Position; Parameters Type Name Description number offset Returns Type Description Position"
  },
  "api/grammarkdown/linkreference.html": {
    "href": "api/grammarkdown/linkreference.html",
    "title": "Class LinkReference | Grammarkdown API Reference",
    "keywords": "Class LinkReference Inheritance Node < SyntaxKind.LinkReference > LinkReference Package : grammarkdown Constructors (constructor)(text) Constructs a new instance of the LinkReference class Declaration constructor(text: string | undefined); Parameters Type Name Description string | undefined text Properties text Declaration readonly text: string | undefined; Property Value Type Description string | undefined Methods children() Declaration children(): IterableIterator<Node>; Returns Type Description IterableIterator < Node > forEachChild(_cbNode) Declaration forEachChild<T>(_cbNode: (node: Node) => T | undefined): T | undefined; Parameters Type Name Description (node: Node ) => T | undefined _cbNode Returns Type Description T | undefined Type Parameters Name Description T"
  },
  "api/grammarkdown/lookaheadassertion.html": {
    "href": "api/grammarkdown/lookaheadassertion.html",
    "title": "Class LookaheadAssertion | Grammarkdown API Reference",
    "keywords": "Class LookaheadAssertion Inheritance AssertionBase < SyntaxKind.LookaheadAssertion , SyntaxKind.OpenBracketToken > LookaheadAssertion Package : grammarkdown Constructors (constructor)(openBracketToken, lookaheadKeyword, operatorToken, lookahead, closeBracketToken) Constructs a new instance of the LookaheadAssertion class Declaration constructor(openBracketToken: Token<SyntaxKind.OpenBracketToken>, lookaheadKeyword: Token<SyntaxKind.LookaheadKeyword>, operatorToken: Token<LookaheadOperatorKind> | undefined, lookahead: SymbolSpan | SymbolSet | undefined, closeBracketToken: Token<SyntaxKind.CloseBracketToken> | undefined); Parameters Type Name Description Token < SyntaxKind.OpenBracketToken > openBracketToken Token < SyntaxKind.LookaheadKeyword > lookaheadKeyword Token < LookaheadOperatorKind > | undefined operatorToken SymbolSpan | SymbolSet | undefined lookahead Token < SyntaxKind.CloseBracketToken > | undefined closeBracketToken Properties lastChild Declaration get lastChild(): Node | undefined; Property Value Type Description Node | undefined lookahead Declaration readonly lookahead: SymbolSpan | SymbolSet | undefined; Property Value Type Description SymbolSpan | SymbolSet | undefined lookaheadKeyword Declaration readonly lookaheadKeyword: Token<SyntaxKind.LookaheadKeyword>; Property Value Type Description Token < SyntaxKind.LookaheadKeyword > operatorToken Declaration readonly operatorToken: Token<LookaheadOperatorKind> | undefined; Property Value Type Description Token < LookaheadOperatorKind > | undefined Methods children() Declaration children(): IterableIterator<Node>; Returns Type Description IterableIterator < Node > forEachChild(cbNode) Declaration forEachChild<T>(cbNode: (node: Node) => T | undefined): T | undefined; Parameters Type Name Description (node: Node ) => T | undefined cbNode Returns Type Description T | undefined Type Parameters Name Description T update(lookahead) Declaration update(lookahead: SymbolSpan | SymbolSet | undefined): LookaheadAssertion; Parameters Type Name Description SymbolSpan | SymbolSet | undefined lookahead Returns Type Description LookaheadAssertion"
  },
  "api/grammarkdown/markdownemitter.html": {
    "href": "api/grammarkdown/markdownemitter.html",
    "title": "Class MarkdownEmitter | Grammarkdown API Reference",
    "keywords": "Class MarkdownEmitter Inheritance Emitter MarkdownEmitter Package : grammarkdown Properties extension Declaration protected extension: string; Property Value Type Description string Methods afterEmitNode(node) Declaration protected afterEmitNode(node: Node): void; Parameters Type Name Description Node node Returns Type Description void emitArgument(node) Declaration protected emitArgument(node: Argument): void; Parameters Type Name Description Argument node Returns Type Description void emitArgumentList(node) Declaration protected emitArgumentList(node: ArgumentList): void; Parameters Type Name Description ArgumentList node Returns Type Description void emitButNotSymbol(node) Declaration protected emitButNotSymbol(node: ButNotSymbol): void; Parameters Type Name Description ButNotSymbol node Returns Type Description void emitConstraints(node) Declaration protected emitConstraints(node: Constraints): void; Parameters Type Name Description Constraints node Returns Type Description void emitEmptyAssertion(node) Declaration protected emitEmptyAssertion(node: EmptyAssertion): void; Parameters Type Name Description EmptyAssertion node Returns Type Description void emitKeyword(node) Declaration protected emitKeyword(node: Node): void; Parameters Type Name Description Node node Returns Type Description void emitLexicalGoalAssertion(node) Declaration protected emitLexicalGoalAssertion(node: LexicalGoalAssertion): void; Parameters Type Name Description LexicalGoalAssertion node Returns Type Description void emitLookaheadAssertion(node) Declaration protected emitLookaheadAssertion(node: LookaheadAssertion): void; Parameters Type Name Description LookaheadAssertion node Returns Type Description void emitNonterminal(node) Declaration protected emitNonterminal(node: Nonterminal): void; Parameters Type Name Description Nonterminal node Returns Type Description void emitNoSymbolHereAssertion(node) Declaration protected emitNoSymbolHereAssertion(node: NoSymbolHereAssertion): void; Parameters Type Name Description NoSymbolHereAssertion node Returns Type Description void emitOneOfList(node) Declaration protected emitOneOfList(node: OneOfList): void; Parameters Type Name Description OneOfList node Returns Type Description void emitOneOfSymbol(node) Declaration protected emitOneOfSymbol(node: OneOfSymbol): void; Parameters Type Name Description OneOfSymbol node Returns Type Description void emitParameter(node) Declaration protected emitParameter(node: Parameter): void; Parameters Type Name Description Parameter node Returns Type Description void emitParameterList(node) Declaration protected emitParameterList(node: ParameterList): void; Parameters Type Name Description ParameterList node Returns Type Description void emitProduction(node) Declaration protected emitProduction(node: Production): void; Parameters Type Name Description Production node Returns Type Description void emitProseAssertion(node) Declaration protected emitProseAssertion(node: ProseAssertion): void; Parameters Type Name Description ProseAssertion node Returns Type Description void emitRightHandSide(node) Declaration protected emitRightHandSide(node: RightHandSide): void; Parameters Type Name Description RightHandSide node Returns Type Description void emitRightHandSideList(node) Declaration protected emitRightHandSideList(node: RightHandSideList): void; Parameters Type Name Description RightHandSideList node Returns Type Description void emitSymbolSet(node) Declaration protected emitSymbolSet(node: SymbolSet): void; Parameters Type Name Description SymbolSet node Returns Type Description void emitSymbolSpan(node) Declaration protected emitSymbolSpan(node: SymbolSpan): void; Parameters Type Name Description SymbolSpan node Returns Type Description void emitTerminal(node) Declaration protected emitTerminal(node: Terminal): void; Parameters Type Name Description Terminal node Returns Type Description void emitTextContent(node) Declaration protected emitTextContent(node: TextContent): void; Parameters Type Name Description TextContent node Returns Type Description void emitUnicodeCharacterLiteral(node) Declaration protected emitUnicodeCharacterLiteral(node: UnicodeCharacterLiteral): void; Parameters Type Name Description UnicodeCharacterLiteral node Returns Type Description void emitUnicodeCharacterRange(node) Declaration protected emitUnicodeCharacterRange(node: UnicodeCharacterRange): void; Parameters Type Name Description UnicodeCharacterRange node Returns Type Description void"
  },
  "api/grammarkdown/metaelementbase.html": {
    "href": "api/grammarkdown/metaelementbase.html",
    "title": "Class MetaElementBase | Grammarkdown API Reference",
    "keywords": "Class MetaElementBase Inheritance SourceElementBase <TKind> MetaElementBase Package : grammarkdown Constructors (constructor)(kind, atToken) Constructs a new instance of the MetaElementBase class Declaration constructor(kind: TKind, atToken: Token<SyntaxKind.AtToken>); Parameters Type Name Description TKind kind Token < SyntaxKind.AtToken > atToken Properties atToken Declaration readonly atToken: Token<SyntaxKind.AtToken>; Property Value Type Description Token < SyntaxKind.AtToken > firstChild Declaration get firstChild(): Node | undefined; Property Value Type Description Node | undefined"
  },
  "api/grammarkdown/multilinecommenttrivia.html": {
    "href": "api/grammarkdown/multilinecommenttrivia.html",
    "title": "Class MultiLineCommentTrivia | Grammarkdown API Reference",
    "keywords": "Class MultiLineCommentTrivia Inheritance CommentTriviaBase < SyntaxKind.MultiLineCommentTrivia > MultiLineCommentTrivia Package : grammarkdown Constructors (constructor)() Constructs a new instance of the MultiLineCommentTrivia class Declaration constructor();"
  },
  "api/grammarkdown/newlinekind.html": {
    "href": "api/grammarkdown/newlinekind.html",
    "title": "Enum NewLineKind | Grammarkdown API Reference",
    "keywords": "Enum NewLineKind Namespace : Assembly : .dll Syntax Fields Name Description CarriageReturnLineFeed LineFeed"
  },
  "api/grammarkdown/node.html": {
    "href": "api/grammarkdown/node.html",
    "title": "Class Node | Grammarkdown API Reference",
    "keywords": "Class Node Package : grammarkdown Constructors (constructor)(kind) Constructs a new instance of the Node class Declaration constructor(kind: TKind); Parameters Type Name Description TKind kind Properties end Declaration end: number; Property Value Type Description number firstChild Declaration get firstChild(): Node | undefined; Property Value Type Description Node | undefined kind Declaration readonly kind: TKind; Property Value Type Description TKind lastChild Declaration get lastChild(): Node | undefined; Property Value Type Description Node | undefined leadingHtmlTrivia Declaration leadingHtmlTrivia: HtmlTrivia[] | undefined; Property Value Type Description HtmlTrivia [] | undefined pos Declaration pos: number; Property Value Type Description number trailingHtmlTrivia Declaration trailingHtmlTrivia: HtmlTrivia[] | undefined; Property Value Type Description HtmlTrivia [] | undefined Methods children() Declaration children(): IterableIterator<Node>; Returns Type Description IterableIterator < Node > forEachChild(_cbNode) Declaration forEachChild<T>(_cbNode: (node: Node) => T | undefined): T | undefined; Parameters Type Name Description (node: Node ) => T | undefined _cbNode Returns Type Description T | undefined Type Parameters Name Description T getEnd() Declaration getEnd(): number; Returns Type Description number getFullStart() Declaration getFullStart(): number; Returns Type Description number getFullText(sourceFile) Declaration getFullText(sourceFile: SourceFile): string; Parameters Type Name Description SourceFile sourceFile Returns Type Description string getFullWidth() Declaration getFullWidth(): number; Returns Type Description number getStart(sourceFile) Declaration getStart(sourceFile?: SourceFile): number; Parameters Type Name Description SourceFile sourceFile Returns Type Description number getText(sourceFile) Declaration getText(sourceFile: SourceFile): string; Parameters Type Name Description SourceFile sourceFile Returns Type Description string getWidth(sourceFile) Declaration getWidth(sourceFile?: SourceFile): number; Parameters Type Name Description SourceFile sourceFile Returns Type Description number"
  },
  "api/grammarkdown/nodenavigator.html": {
    "href": "api/grammarkdown/nodenavigator.html",
    "title": "Class NodeNavigator | Grammarkdown API Reference",
    "keywords": "Class NodeNavigator Package : grammarkdown Constructors (constructor)(sourceFile) Constructs a new instance of the NodeNavigator class Declaration constructor(sourceFile: SourceFile); Parameters Type Name Description SourceFile sourceFile (constructor)(other) Constructs a new instance of the NodeNavigator class Declaration constructor(other: NodeNavigator); Parameters Type Name Description NodeNavigator other Methods clone() Declaration clone(): NodeNavigator; Returns Type Description NodeNavigator getArray() Declaration getArray(): readonly Node<SyntaxKind>[] | undefined; Returns Type Description readonly Node < SyntaxKind >[] | undefined getDepth() Declaration getDepth(): number; Returns Type Description number getKind() Declaration getKind(): SyntaxKind; Returns Type Description SyntaxKind getName() Declaration getName(): string | undefined; Returns Type Description string | undefined getNode() Declaration getNode(): Node<SyntaxKind>; Returns Type Description Node < SyntaxKind > getOffset() Declaration getOffset(): number; Returns Type Description number getParent() Declaration getParent(): Node<SyntaxKind> | undefined; Returns Type Description Node < SyntaxKind > | undefined getRoot() Declaration getRoot(): SourceFile; Returns Type Description SourceFile hasAncestor(predicate) Declaration hasAncestor(predicate?: (node: Node) => boolean): boolean; Parameters Type Name Description (node: Node ) => boolean predicate Returns Type Description boolean hasChildren(predicate) Declaration hasChildren(predicate?: (node: Node) => boolean): boolean; Parameters Type Name Description (node: Node ) => boolean predicate Returns Type Description boolean isArray() Declaration isArray(): boolean; Returns Type Description boolean isSamePosition(other) Declaration isSamePosition(other: NodeNavigator): boolean; Parameters Type Name Description NodeNavigator other Returns Type Description boolean moveTo(other) Declaration moveTo(other: NodeNavigator): boolean; Parameters Type Name Description NodeNavigator other Returns Type Description boolean moveToAncestor(predicate) Declaration moveToAncestor(predicate: (node: Node) => boolean): boolean; Parameters Type Name Description (node: Node ) => boolean predicate Returns Type Description boolean moveToAncestorOrSelf(predicate) Declaration moveToAncestorOrSelf(predicate: (node: Node) => boolean): boolean; Parameters Type Name Description (node: Node ) => boolean predicate Returns Type Description boolean moveToDeclaration() Declaration moveToDeclaration(): boolean; Returns Type Description boolean moveToFirstChild() Declaration moveToFirstChild(): boolean; Returns Type Description boolean moveToFirstChild(name) Declaration moveToFirstChild(name: string): boolean; Parameters Type Name Description string name Returns Type Description boolean moveToFirstChild(predicate) Declaration moveToFirstChild(predicate: (node: Node) => boolean): boolean; Parameters Type Name Description (node: Node ) => boolean predicate Returns Type Description boolean moveToFirstElement(predicate) Declaration moveToFirstElement(predicate?: (node: Node) => boolean): boolean; Parameters Type Name Description (node: Node ) => boolean predicate Returns Type Description boolean moveToFirstSibling() Declaration moveToFirstSibling(): boolean; Returns Type Description boolean moveToFirstSibling(name) Declaration moveToFirstSibling(name: string): boolean; Parameters Type Name Description string name Returns Type Description boolean moveToFirstSibling(predicate) Declaration moveToFirstSibling(predicate: (node: Node) => boolean): boolean; Parameters Type Name Description (node: Node ) => boolean predicate Returns Type Description boolean moveToLastChild() Declaration moveToLastChild(): boolean; Returns Type Description boolean moveToLastChild(name) Declaration moveToLastChild(name: string): boolean; Parameters Type Name Description string name Returns Type Description boolean moveToLastChild(predicate) Declaration moveToLastChild(predicate: (node: Node) => boolean): boolean; Parameters Type Name Description (node: Node ) => boolean predicate Returns Type Description boolean moveToLastElement(predicate) Declaration moveToLastElement(predicate?: (node: Node) => boolean): boolean; Parameters Type Name Description (node: Node ) => boolean predicate Returns Type Description boolean moveToLastSibling() Declaration moveToLastSibling(): boolean; Returns Type Description boolean moveToLastSibling(name) Declaration moveToLastSibling(name: string): boolean; Parameters Type Name Description string name Returns Type Description boolean moveToLastSibling(predicate) Declaration moveToLastSibling(predicate: (node: Node) => boolean): boolean; Parameters Type Name Description (node: Node ) => boolean predicate Returns Type Description boolean moveToName() Declaration moveToName(): boolean; Returns Type Description boolean moveToNextElement(predicate) Declaration moveToNextElement(predicate?: (node: Node) => boolean): boolean; Parameters Type Name Description (node: Node ) => boolean predicate Returns Type Description boolean moveToNextSibling() Declaration moveToNextSibling(): boolean; Returns Type Description boolean moveToNextSibling(name) Declaration moveToNextSibling(name: string): boolean; Parameters Type Name Description string name Returns Type Description boolean moveToNextSibling(predicate) Declaration moveToNextSibling(predicate: (node: Node) => boolean): boolean; Parameters Type Name Description (node: Node ) => boolean predicate Returns Type Description boolean moveToParent(predicate) Declaration moveToParent(predicate?: (node: Node) => boolean): boolean; Parameters Type Name Description (node: Node ) => boolean predicate Returns Type Description boolean moveToPosition(position) Declaration moveToPosition(position: Position): boolean; Parameters Type Name Description Position position Returns Type Description boolean moveToPreviousElement(predicate) Declaration moveToPreviousElement(predicate?: (node: Node) => boolean): boolean; Parameters Type Name Description (node: Node ) => boolean predicate Returns Type Description boolean moveToPreviousSibling() Declaration moveToPreviousSibling(): boolean; Returns Type Description boolean moveToPreviousSibling(name) Declaration moveToPreviousSibling(name: string): boolean; Parameters Type Name Description string name Returns Type Description boolean moveToPreviousSibling(predicate) Declaration moveToPreviousSibling(predicate: (node: Node) => boolean): boolean; Parameters Type Name Description (node: Node ) => boolean predicate Returns Type Description boolean moveToRoot() Declaration moveToRoot(): boolean; Returns Type Description boolean moveToSourceElement() Declaration moveToSourceElement(): boolean; Returns Type Description boolean"
  },
  "api/grammarkdown/nodevisitor.html": {
    "href": "api/grammarkdown/nodevisitor.html",
    "title": "Class NodeVisitor | Grammarkdown API Reference",
    "keywords": "Class NodeVisitor Package : grammarkdown Methods visit(node) Declaration visit<T extends Node>(node: T): T; Parameters Type Name Description T node Returns Type Description T Type Parameters Name Description T visit(node) Declaration visit<T extends Node>(node: T | undefined): T | undefined; Parameters Type Name Description T | undefined node Returns Type Description T | undefined Type Parameters Name Description T visitArgument(node) Declaration visitArgument(node: Argument): Argument; Parameters Type Name Description Argument node Returns Type Description Argument visitArgumentList(node) Declaration visitArgumentList(node: ArgumentList): ArgumentList; Parameters Type Name Description ArgumentList node Returns Type Description ArgumentList visitButNotSymbol(node) Declaration visitButNotSymbol(node: ButNotSymbol): ButNotSymbol; Parameters Type Name Description ButNotSymbol node Returns Type Description ButNotSymbol visitConstraints(node) Declaration visitConstraints(node: Constraints): Constraints; Parameters Type Name Description Constraints node Returns Type Description Constraints visitDefine(node) Declaration visitDefine(node: Define): Define; Parameters Type Name Description Define node Returns Type Description Define visitEach(nodes) Declaration visitEach<T extends Node>(nodes: ReadonlyArray<T>): ReadonlyArray<T>; Parameters Type Name Description ReadonlyArray <T> nodes Returns Type Description ReadonlyArray <T> Type Parameters Name Description T visitEach(nodes) Declaration visitEach<T extends Node>(nodes: ReadonlyArray<T> | undefined): ReadonlyArray<T> | undefined; Parameters Type Name Description ReadonlyArray <T> | undefined nodes Returns Type Description ReadonlyArray <T> | undefined Type Parameters Name Description T visitEmptyAssertion(node) Declaration visitEmptyAssertion(node: EmptyAssertion): EmptyAssertion; Parameters Type Name Description EmptyAssertion node Returns Type Description EmptyAssertion visitExtension(node) Declaration visitExtension<T extends Node>(node: T): T; Parameters Type Name Description T node Returns Type Description T Type Parameters Name Description T visitIdentifier(node) Declaration visitIdentifier(node: Identifier): Identifier; Parameters Type Name Description Identifier node Returns Type Description Identifier visitImport(node) Declaration visitImport(node: Import): Import; Parameters Type Name Description Import node Returns Type Description Import visitInvalidAssertion(node) Declaration visitInvalidAssertion(node: InvalidAssertion): InvalidAssertion; Parameters Type Name Description InvalidAssertion node Returns Type Description InvalidAssertion visitInvalidSymbol(node) Declaration visitInvalidSymbol(node: InvalidSymbol): InvalidSymbol; Parameters Type Name Description InvalidSymbol node Returns Type Description InvalidSymbol visitLexicalGoalAssertion(node) Declaration visitLexicalGoalAssertion(node: LexicalGoalAssertion): LexicalGoalAssertion; Parameters Type Name Description LexicalGoalAssertion node Returns Type Description LexicalGoalAssertion visitLinkReference(node) Declaration visitLinkReference(node: LinkReference): LinkReference; Parameters Type Name Description LinkReference node Returns Type Description LinkReference visitLookaheadAssertion(node) Declaration visitLookaheadAssertion(node: LookaheadAssertion): LookaheadAssertion; Parameters Type Name Description LookaheadAssertion node Returns Type Description LookaheadAssertion visitNonterminal(node) Declaration visitNonterminal(node: Nonterminal): Nonterminal; Parameters Type Name Description Nonterminal node Returns Type Description Nonterminal visitNoSymbolHereAssertion(node) Declaration visitNoSymbolHereAssertion(node: NoSymbolHereAssertion): NoSymbolHereAssertion; Parameters Type Name Description NoSymbolHereAssertion node Returns Type Description NoSymbolHereAssertion visitOneOfList(node) Declaration visitOneOfList(node: OneOfList): OneOfList; Parameters Type Name Description OneOfList node Returns Type Description OneOfList visitOneOfSymbol(node) Declaration visitOneOfSymbol(node: OneOfSymbol): OneOfSymbol; Parameters Type Name Description OneOfSymbol node Returns Type Description OneOfSymbol visitParameter(node) Declaration visitParameter(node: Parameter): Parameter; Parameters Type Name Description Parameter node Returns Type Description Parameter visitParameterList(node) Declaration visitParameterList(node: ParameterList): ParameterList; Parameters Type Name Description ParameterList node Returns Type Description ParameterList visitPlaceholderSymbol(node) Declaration visitPlaceholderSymbol(node: PlaceholderSymbol): PlaceholderSymbol; Parameters Type Name Description PlaceholderSymbol node Returns Type Description PlaceholderSymbol visitProduction(node) Declaration visitProduction(node: Production): Production; Parameters Type Name Description Production node Returns Type Description Production visitProse(node) Declaration visitProse(node: Prose): Prose; Parameters Type Name Description Prose node Returns Type Description Prose visitProseAssertion(node) Declaration visitProseAssertion(node: ProseAssertion): ProseAssertion; Parameters Type Name Description ProseAssertion node Returns Type Description ProseAssertion visitProseFragmentLiteral(node) Declaration visitProseFragmentLiteral(node: ProseFragmentLiteral): ProseFragmentLiteral; Parameters Type Name Description ProseFragmentLiteral node Returns Type Description ProseFragmentLiteral visitRightHandSide(node) Declaration visitRightHandSide(node: RightHandSide): RightHandSide; Parameters Type Name Description RightHandSide node Returns Type Description RightHandSide visitRightHandSideList(node) Declaration visitRightHandSideList(node: RightHandSideList): RightHandSideList; Parameters Type Name Description RightHandSideList node Returns Type Description RightHandSideList visitSourceFile(node) Declaration visitSourceFile(node: SourceFile): SourceFile; Parameters Type Name Description SourceFile node Returns Type Description SourceFile visitStringLiteral(node) Declaration visitStringLiteral(node: StringLiteral): StringLiteral; Parameters Type Name Description StringLiteral node Returns Type Description StringLiteral visitSymbolSet(node) Declaration visitSymbolSet(node: SymbolSet): SymbolSet; Parameters Type Name Description SymbolSet node Returns Type Description SymbolSet visitSymbolSpan(node) Declaration visitSymbolSpan(node: SymbolSpan): SymbolSpan; Parameters Type Name Description SymbolSpan node Returns Type Description SymbolSpan visitTerminal(node) Declaration visitTerminal(node: Terminal): Terminal; Parameters Type Name Description Terminal node Returns Type Description Terminal visitToken(node) Declaration visitToken<TKind extends TokenKind>(node: Token<TKind>): Token<TKind>; Parameters Type Name Description Token <TKind> node Returns Type Description Token <TKind> Type Parameters Name Description TKind visitUnicodeCharacterLiteral(node) Declaration visitUnicodeCharacterLiteral(node: UnicodeCharacterLiteral): UnicodeCharacterLiteral; Parameters Type Name Description UnicodeCharacterLiteral node Returns Type Description UnicodeCharacterLiteral visitUnicodeCharacterRange(node) Declaration visitUnicodeCharacterRange(node: UnicodeCharacterRange): UnicodeCharacterRange; Parameters Type Name Description UnicodeCharacterRange node Returns Type Description UnicodeCharacterRange"
  },
  "api/grammarkdown/nonterminal.html": {
    "href": "api/grammarkdown/nonterminal.html",
    "title": "Class Nonterminal | Grammarkdown API Reference",
    "keywords": "Class Nonterminal Inheritance OptionalSymbolBase < SyntaxKind.Nonterminal > Nonterminal Package : grammarkdown Constructors (constructor)(name, argumentList, questionToken) Constructs a new instance of the Nonterminal class Declaration constructor(name: Identifier, argumentList: ArgumentList | undefined, questionToken: Token<SyntaxKind.QuestionToken> | undefined); Parameters Type Name Description Identifier name ArgumentList | undefined argumentList Token < SyntaxKind.QuestionToken > | undefined questionToken Properties argumentList Declaration readonly argumentList: ArgumentList | undefined; Property Value Type Description ArgumentList | undefined firstChild Declaration get firstChild(): Node | undefined; Property Value Type Description Node | undefined lastChild Declaration get lastChild(): Node | undefined; Property Value Type Description Node | undefined name Declaration readonly name: Identifier; Property Value Type Description Identifier Methods children() Declaration children(): IterableIterator<Node>; Returns Type Description IterableIterator < Node > forEachChild(cbNode) Declaration forEachChild<T>(cbNode: (node: Node) => T | undefined): T | undefined; Parameters Type Name Description (node: Node ) => T | undefined cbNode Returns Type Description T | undefined Type Parameters Name Description T update(name, argumentList) Declaration update(name: Identifier, argumentList: ArgumentList | undefined): Nonterminal; Parameters Type Name Description Identifier name ArgumentList | undefined argumentList Returns Type Description Nonterminal"
  },
  "api/grammarkdown/nosymbolhereassertion.html": {
    "href": "api/grammarkdown/nosymbolhereassertion.html",
    "title": "Class NoSymbolHereAssertion | Grammarkdown API Reference",
    "keywords": "Class NoSymbolHereAssertion Inheritance AssertionBase < SyntaxKind.NoSymbolHereAssertion , SyntaxKind.OpenBracketToken > NoSymbolHereAssertion Package : grammarkdown Constructors (constructor)(openBracketToken, noKeyword, symbols, hereKeyword, closeBracketToken) Constructs a new instance of the NoSymbolHereAssertion class Declaration constructor(openBracketToken: Token<SyntaxKind.OpenBracketToken>, noKeyword: Token<SyntaxKind.NoKeyword>, symbols: ReadonlyArray<PrimarySymbol> | undefined, hereKeyword: Token<SyntaxKind.HereKeyword> | undefined, closeBracketToken: Token<SyntaxKind.CloseBracketToken> | undefined); Parameters Type Name Description Token < SyntaxKind.OpenBracketToken > openBracketToken Token < SyntaxKind.NoKeyword > noKeyword ReadonlyArray < PrimarySymbol > | undefined symbols Token < SyntaxKind.HereKeyword > | undefined hereKeyword Token < SyntaxKind.CloseBracketToken > | undefined closeBracketToken Properties hereKeyword Declaration readonly hereKeyword: Token<SyntaxKind.HereKeyword> | undefined; Property Value Type Description Token < SyntaxKind.HereKeyword > | undefined lastChild Declaration get lastChild(): Node | undefined; Property Value Type Description Node | undefined noKeyword Declaration readonly noKeyword: Token<SyntaxKind.NoKeyword>; Property Value Type Description Token < SyntaxKind.NoKeyword > symbols Declaration readonly symbols: ReadonlyArray<PrimarySymbol> | undefined; Property Value Type Description ReadonlyArray < PrimarySymbol > | undefined Methods children() Declaration children(): IterableIterator<Node>; Returns Type Description IterableIterator < Node > forEachChild(cbNode) Declaration forEachChild<T>(cbNode: (node: Node) => T | undefined): T | undefined; Parameters Type Name Description (node: Node ) => T | undefined cbNode Returns Type Description T | undefined Type Parameters Name Description T update(symbols) Declaration update(symbols: ReadonlyArray<PrimarySymbol> | undefined): NoSymbolHereAssertion; Parameters Type Name Description ReadonlyArray < PrimarySymbol > | undefined symbols Returns Type Description NoSymbolHereAssertion"
  },
  "api/grammarkdown/nulldiagnosticmessages.html": {
    "href": "api/grammarkdown/nulldiagnosticmessages.html",
    "title": "Class NullDiagnosticMessages | Grammarkdown API Reference",
    "keywords": "Class NullDiagnosticMessages Inheritance DiagnosticMessages NullDiagnosticMessages Package : grammarkdown Properties instance Declaration static get instance(): NullDiagnosticMessages; Property Value Type Description NullDiagnosticMessages size Declaration get size(): number; Property Value Type Description number Methods copyFrom(other) Declaration copyFrom(other: DiagnosticMessages): void; Parameters Type Name Description DiagnosticMessages other Returns Type Description void report(pos, message, args) Declaration report(pos: number, message: Diagnostic, ...args: any[]): void; Parameters Type Name Description number pos Diagnostic message any[] args Returns Type Description void reportNode(sourceFile, node, message, args) Declaration reportNode(sourceFile: SourceFile | undefined, node: Node, message: Diagnostic, ...args: any[]): void; Parameters Type Name Description SourceFile | undefined sourceFile Node node Diagnostic message any[] args Returns Type Description void setSourceFile(sourceFile) Declaration setSourceFile(sourceFile: SourceFile): void; Parameters Type Name Description SourceFile sourceFile Returns Type Description void"
  },
  "api/grammarkdown/oneoflist.html": {
    "href": "api/grammarkdown/oneoflist.html",
    "title": "Class OneOfList | Grammarkdown API Reference",
    "keywords": "Class OneOfList Inheritance ProductionBodyBase < SyntaxKind.OneOfList > OneOfList Package : grammarkdown Constructors (constructor)(oneKeyword, ofKeyword, indented, terminals) Constructs a new instance of the OneOfList class Declaration constructor(oneKeyword: Token<SyntaxKind.OneKeyword>, ofKeyword: Token<SyntaxKind.OfKeyword> | undefined, indented: boolean, terminals: ReadonlyArray<Terminal> | undefined); Parameters Type Name Description Token < SyntaxKind.OneKeyword > oneKeyword Token < SyntaxKind.OfKeyword > | undefined ofKeyword boolean indented ReadonlyArray < Terminal > | undefined terminals Properties firstChild Declaration get firstChild(): Node | undefined; Property Value Type Description Node | undefined indented Declaration readonly indented: boolean; Property Value Type Description boolean lastChild Declaration get lastChild(): Node | undefined; Property Value Type Description Node | undefined ofKeyword Declaration readonly ofKeyword: Token<SyntaxKind.OfKeyword> | undefined; Property Value Type Description Token < SyntaxKind.OfKeyword > | undefined oneKeyword Declaration readonly oneKeyword: Token<SyntaxKind.OneKeyword>; Property Value Type Description Token < SyntaxKind.OneKeyword > terminals Declaration readonly terminals: ReadonlyArray<Terminal> | undefined; Property Value Type Description ReadonlyArray < Terminal > | undefined Methods children() Declaration children(): IterableIterator<Node>; Returns Type Description IterableIterator < Node > forEachChild(cbNode) Declaration forEachChild<T>(cbNode: (node: Node) => T | undefined): T | undefined; Parameters Type Name Description (node: Node ) => T | undefined cbNode Returns Type Description T | undefined Type Parameters Name Description T update(terminals) Declaration update(terminals: ReadonlyArray<Terminal> | undefined): OneOfList; Parameters Type Name Description ReadonlyArray < Terminal > | undefined terminals Returns Type Description OneOfList"
  },
  "api/grammarkdown/oneofsymbol.html": {
    "href": "api/grammarkdown/oneofsymbol.html",
    "title": "Class OneOfSymbol | Grammarkdown API Reference",
    "keywords": "Class OneOfSymbol Inheritance LexicalSymbolBase < SyntaxKind.OneOfSymbol > OneOfSymbol Package : grammarkdown Constructors (constructor)(oneKeyword, ofKeyword, symbols) Constructs a new instance of the OneOfSymbol class Declaration constructor(oneKeyword: Token<SyntaxKind.OneKeyword>, ofKeyword: Token<SyntaxKind.OfKeyword> | undefined, symbols: ReadonlyArray<LexicalSymbol> | undefined); Parameters Type Name Description Token < SyntaxKind.OneKeyword > oneKeyword Token < SyntaxKind.OfKeyword > | undefined ofKeyword ReadonlyArray < LexicalSymbol > | undefined symbols Properties firstChild Declaration get firstChild(): Node | undefined; Property Value Type Description Node | undefined lastChild Declaration get lastChild(): Node | undefined; Property Value Type Description Node | undefined ofKeyword Declaration readonly ofKeyword: Token<SyntaxKind.OfKeyword> | undefined; Property Value Type Description Token < SyntaxKind.OfKeyword > | undefined oneKeyword Declaration readonly oneKeyword: Token<SyntaxKind.OneKeyword>; Property Value Type Description Token < SyntaxKind.OneKeyword > symbols Declaration readonly symbols: ReadonlyArray<LexicalSymbol> | undefined; Property Value Type Description ReadonlyArray < LexicalSymbol > | undefined Methods children() Declaration children(): IterableIterator<Node>; Returns Type Description IterableIterator < Node > forEachChild(cbNode) Declaration forEachChild<T>(cbNode: (node: Node) => T | undefined): T | undefined; Parameters Type Name Description (node: Node ) => T | undefined cbNode Returns Type Description T | undefined Type Parameters Name Description T update(symbols) Declaration update(symbols: ReadonlyArray<LexicalSymbol> | undefined): OneOfSymbol; Parameters Type Name Description ReadonlyArray < LexicalSymbol > | undefined symbols Returns Type Description OneOfSymbol"
  },
  "api/grammarkdown/optionalsymbolbase.html": {
    "href": "api/grammarkdown/optionalsymbolbase.html",
    "title": "Class OptionalSymbolBase | Grammarkdown API Reference",
    "keywords": "Class OptionalSymbolBase Inheritance PrimarySymbolBase <TKind> OptionalSymbolBase Package : grammarkdown Constructors (constructor)(kind, questionToken) Constructs a new instance of the OptionalSymbolBase class Declaration constructor(kind: TKind, questionToken: Token<SyntaxKind.QuestionToken> | undefined); Parameters Type Name Description TKind kind Token < SyntaxKind.QuestionToken > | undefined questionToken Properties questionToken Declaration readonly questionToken: Token<SyntaxKind.QuestionToken> | undefined; Property Value Type Description Token < SyntaxKind.QuestionToken > | undefined"
  },
  "api/grammarkdown/parameter.html": {
    "href": "api/grammarkdown/parameter.html",
    "title": "Class Parameter | Grammarkdown API Reference",
    "keywords": "Class Parameter Inheritance Node < SyntaxKind.Parameter > Parameter Package : grammarkdown Constructors (constructor)(name) Constructs a new instance of the Parameter class Declaration constructor(name: Identifier); Parameters Type Name Description Identifier name Properties firstChild Declaration get firstChild(): Node | undefined; Property Value Type Description Node | undefined lastChild Declaration get lastChild(): Node | undefined; Property Value Type Description Node | undefined name Declaration readonly name: Identifier; Property Value Type Description Identifier Methods children() Declaration children(): IterableIterator<Node>; Returns Type Description IterableIterator < Node > forEachChild(cbNode) Declaration forEachChild<T>(cbNode: (node: Node) => T | undefined): T | undefined; Parameters Type Name Description (node: Node ) => T | undefined cbNode Returns Type Description T | undefined Type Parameters Name Description T update(name) Declaration update(name: Identifier): Parameter; Parameters Type Name Description Identifier name Returns Type Description Parameter"
  },
  "api/grammarkdown/parameterlist.html": {
    "href": "api/grammarkdown/parameterlist.html",
    "title": "Class ParameterList | Grammarkdown API Reference",
    "keywords": "Class ParameterList Inheritance Node < SyntaxKind.ParameterList > ParameterList Package : grammarkdown Constructors (constructor)(openParenToken, elements, closeParenToken) Constructs a new instance of the ParameterList class Declaration constructor(openParenToken: Token<SyntaxKind.OpenParenToken | SyntaxKind.OpenBracketToken>, elements: ReadonlyArray<Parameter> | undefined, closeParenToken: Token<SyntaxKind.CloseParenToken | SyntaxKind.CloseBracketToken> | undefined); Parameters Type Name Description Token < SyntaxKind.OpenParenToken | SyntaxKind.OpenBracketToken > openParenToken ReadonlyArray < Parameter > | undefined elements Token < SyntaxKind.CloseParenToken | SyntaxKind.CloseBracketToken > | undefined closeParenToken Properties closeParenToken Declaration readonly closeParenToken: Token<SyntaxKind.CloseParenToken | SyntaxKind.CloseBracketToken> | undefined; Property Value Type Description Token < SyntaxKind.CloseParenToken | SyntaxKind.CloseBracketToken > | undefined elements Declaration readonly elements: ReadonlyArray<Parameter> | undefined; Property Value Type Description ReadonlyArray < Parameter > | undefined firstChild Declaration get firstChild(): Node | undefined; Property Value Type Description Node | undefined lastChild Declaration get lastChild(): Node | undefined; Property Value Type Description Node | undefined openParenToken Declaration readonly openParenToken: Token<SyntaxKind.OpenParenToken | SyntaxKind.OpenBracketToken>; Property Value Type Description Token < SyntaxKind.OpenParenToken | SyntaxKind.OpenBracketToken > Methods children() Declaration children(): IterableIterator<Node>; Returns Type Description IterableIterator < Node > forEachChild(cbNode) Declaration forEachChild<T>(cbNode: (node: Node) => T | undefined): T | undefined; Parameters Type Name Description (node: Node ) => T | undefined cbNode Returns Type Description T | undefined Type Parameters Name Description T update(elements) Declaration update(elements: ReadonlyArray<Parameter> | undefined): ParameterList; Parameters Type Name Description ReadonlyArray < Parameter > | undefined elements Returns Type Description ParameterList"
  },
  "api/grammarkdown/parser.html": {
    "href": "api/grammarkdown/parser.html",
    "title": "Class Parser | Grammarkdown API Reference",
    "keywords": "Class Parser Package : grammarkdown Methods parseSourceFile(filename, text, cancelable) Declaration parseSourceFile(filename: string, text: string, cancelable?: Cancelable): SourceFile; Parameters Type Name Description string filename string text Cancelable cancelable Returns Type Description SourceFile parseSourceFile(filename, text, cancelable) Declaration parseSourceFile(filename: string, text: string, cancelable?: CancellationToken | Cancelable): SourceFile; Parameters Type Name Description string filename string text CancellationToken | Cancelable cancelable Returns Type Description SourceFile"
  },
  "api/grammarkdown/placeholdersymbol.html": {
    "href": "api/grammarkdown/placeholdersymbol.html",
    "title": "Class PlaceholderSymbol | Grammarkdown API Reference",
    "keywords": "Class PlaceholderSymbol Inheritance LexicalSymbolBase < SyntaxKind.PlaceholderSymbol > PlaceholderSymbol Package : grammarkdown Constructors (constructor)(placeholderToken) Constructs a new instance of the PlaceholderSymbol class Declaration constructor(placeholderToken: Token<SyntaxKind.AtToken>); Parameters Type Name Description Token < SyntaxKind.AtToken > placeholderToken Properties firstChild Declaration get firstChild(): Node | undefined; Property Value Type Description Node | undefined lastChild Declaration get lastChild(): Node | undefined; Property Value Type Description Node | undefined placeholderToken Declaration readonly placeholderToken: Token<SyntaxKind.AtToken>; Property Value Type Description Token < SyntaxKind.AtToken > Methods children() Declaration children(): IterableIterator<Node>; Returns Type Description IterableIterator < Node > forEachChild(cbNode) Declaration forEachChild<T>(cbNode: (node: Node) => T | undefined): T | undefined; Parameters Type Name Description (node: Node ) => T | undefined cbNode Returns Type Description T | undefined Type Parameters Name Description T"
  },
  "api/grammarkdown/position-interface.html": {
    "href": "api/grammarkdown/position-interface.html",
    "title": "Interface Position | Grammarkdown API Reference",
    "keywords": "Interface Position Package : grammarkdown Properties character Declaration character: number; Property Value Type Description number line Declaration line: number; Property Value Type Description number"
  },
  "api/grammarkdown/position-namespace.html": {
    "href": "api/grammarkdown/position-namespace.html",
    "title": "Namespace Position | Grammarkdown API Reference",
    "keywords": "Namespace Position Package : grammarkdown Functions clone(position) Declaration function clone(position: Position): Position; Parameters Type Name Description Position position Returns Type Description Position compare(left, right) Declaration function compare(left: Position, right: Position): 1 | 0 | -1; Parameters Type Name Description Position left Position right Returns Type Description 1 | 0 | -1 create(line, character) Declaration function create(line: number, character: number): Position; Parameters Type Name Description number line number character Returns Type Description Position equals(left, right) Declaration function equals(left: Position, right: Position): boolean; Parameters Type Name Description Position left Position right Returns Type Description boolean"
  },
  "api/grammarkdown/primarysymbolbase.html": {
    "href": "api/grammarkdown/primarysymbolbase.html",
    "title": "Class PrimarySymbolBase | Grammarkdown API Reference",
    "keywords": "Class PrimarySymbolBase Inheritance LexicalSymbolBase <TKind> PrimarySymbolBase Package : grammarkdown"
  },
  "api/grammarkdown/production.html": {
    "href": "api/grammarkdown/production.html",
    "title": "Class Production | Grammarkdown API Reference",
    "keywords": "Class Production Inheritance SourceElementBase < SyntaxKind.Production > Production Package : grammarkdown Constructors (constructor)(name, parameterList, colonToken, body) Constructs a new instance of the Production class Declaration constructor(name: Identifier, parameterList: ParameterList | undefined, colonToken: Token<ProductionSeperatorKind> | undefined, body: ProductionBody | undefined); Parameters Type Name Description Identifier name ParameterList | undefined parameterList Token < ProductionSeperatorKind > | undefined colonToken ProductionBody | undefined body Properties body Declaration readonly body: ProductionBody | undefined; Property Value Type Description ProductionBody | undefined colonToken Declaration readonly colonToken: Token<ProductionSeperatorKind> | undefined; Property Value Type Description Token < ProductionSeperatorKind > | undefined firstChild Declaration get firstChild(): Node | undefined; Property Value Type Description Node | undefined lastChild Declaration get lastChild(): Node | undefined; Property Value Type Description Node | undefined name Declaration readonly name: Identifier; Property Value Type Description Identifier parameterList Declaration readonly parameterList: ParameterList | undefined; Property Value Type Description ParameterList | undefined Methods children() Declaration children(): IterableIterator<Node>; Returns Type Description IterableIterator < Node > forEachChild(cbNode) Declaration forEachChild<T>(cbNode: (node: Node) => T | undefined): T | undefined; Parameters Type Name Description (node: Node ) => T | undefined cbNode Returns Type Description T | undefined Type Parameters Name Description T update(name, parameterList, body) Declaration update(name: Identifier, parameterList: ParameterList | undefined, body: ProductionBody | undefined): Production; Parameters Type Name Description Identifier name ParameterList | undefined parameterList ProductionBody | undefined body Returns Type Description Production"
  },
  "api/grammarkdown/productionbodybase.html": {
    "href": "api/grammarkdown/productionbodybase.html",
    "title": "Class ProductionBodyBase | Grammarkdown API Reference",
    "keywords": "Class ProductionBodyBase Inheritance Node <TKind> ProductionBodyBase Package : grammarkdown"
  },
  "api/grammarkdown/prose.html": {
    "href": "api/grammarkdown/prose.html",
    "title": "Class Prose | Grammarkdown API Reference",
    "keywords": "Class Prose Inheritance LexicalSymbolBase < SyntaxKind.Prose > Prose Package : grammarkdown Constructors (constructor)(greaterThanToken, fragments) Constructs a new instance of the Prose class Declaration constructor(greaterThanToken: Token<SyntaxKind.GreaterThanToken>, fragments: ReadonlyArray<ProseFragment> | undefined); Parameters Type Name Description Token < SyntaxKind.GreaterThanToken > greaterThanToken ReadonlyArray < ProseFragment > | undefined fragments Properties firstChild Declaration get firstChild(): Node | undefined; Property Value Type Description Node | undefined fragments Declaration readonly fragments: ReadonlyArray<ProseFragment> | undefined; Property Value Type Description ReadonlyArray < ProseFragment > | undefined greaterThanToken Declaration readonly greaterThanToken: Token<SyntaxKind.GreaterThanToken>; Property Value Type Description Token < SyntaxKind.GreaterThanToken > lastChild Declaration get lastChild(): Node | undefined; Property Value Type Description Node | undefined Methods children() Declaration children(): IterableIterator<Node>; Returns Type Description IterableIterator < Node > forEachChild(cbNode) Declaration forEachChild<T>(cbNode: (node: Node) => T | undefined): T | undefined; Parameters Type Name Description (node: Node ) => T | undefined cbNode Returns Type Description T | undefined Type Parameters Name Description T update(fragments) Declaration update(fragments: ReadonlyArray<ProseFragment> | undefined): Prose; Parameters Type Name Description ReadonlyArray < ProseFragment > | undefined fragments Returns Type Description Prose"
  },
  "api/grammarkdown/proseassertion.html": {
    "href": "api/grammarkdown/proseassertion.html",
    "title": "Class ProseAssertion | Grammarkdown API Reference",
    "keywords": "Class ProseAssertion Inheritance AssertionBase < SyntaxKind.ProseAssertion , SyntaxKind.OpenBracketGreaterThanToken > ProseAssertion Package : grammarkdown Constructors (constructor)(openBracketToken, fragments, closeBracketToken) Constructs a new instance of the ProseAssertion class Declaration constructor(openBracketToken: Token<SyntaxKind.OpenBracketGreaterThanToken>, fragments: ReadonlyArray<ProseFragment> | undefined, closeBracketToken: Token<SyntaxKind.CloseBracketToken> | undefined); Parameters Type Name Description Token < SyntaxKind.OpenBracketGreaterThanToken > openBracketToken ReadonlyArray < ProseFragment > | undefined fragments Token < SyntaxKind.CloseBracketToken > | undefined closeBracketToken Properties fragments Declaration readonly fragments: ReadonlyArray<ProseFragment> | undefined; Property Value Type Description ReadonlyArray < ProseFragment > | undefined lastChild Declaration get lastChild(): Node | undefined; Property Value Type Description Node | undefined Methods children() Declaration children(): IterableIterator<Node>; Returns Type Description IterableIterator < Node > forEachChild(cbNode) Declaration forEachChild<T>(cbNode: (node: Node) => T | undefined): T | undefined; Parameters Type Name Description (node: Node ) => T | undefined cbNode Returns Type Description T | undefined Type Parameters Name Description T update(fragments) Declaration update(fragments: ReadonlyArray<ProseFragment> | undefined): ProseAssertion; Parameters Type Name Description ReadonlyArray < ProseFragment > | undefined fragments Returns Type Description ProseAssertion"
  },
  "api/grammarkdown/prosefragmentliteral.html": {
    "href": "api/grammarkdown/prosefragmentliteral.html",
    "title": "Class ProseFragmentLiteral | Grammarkdown API Reference",
    "keywords": "Class ProseFragmentLiteral Inheritance Node < SyntaxKind > ProseFragmentLiteral Package : grammarkdown Constructors (constructor)(kind, text) Constructs a new instance of the ProseFragmentLiteral class Declaration constructor(kind: SyntaxKind, text: string | undefined); Parameters Type Name Description SyntaxKind kind string | undefined text Properties text Declaration readonly text: string | undefined; Property Value Type Description string | undefined"
  },
  "api/grammarkdown/range-interface.html": {
    "href": "api/grammarkdown/range-interface.html",
    "title": "Interface Range | Grammarkdown API Reference",
    "keywords": "Interface Range Package : grammarkdown Properties end Declaration end: Position; Property Value Type Description Position start Declaration start: Position; Property Value Type Description Position"
  },
  "api/grammarkdown/range-namespace.html": {
    "href": "api/grammarkdown/range-namespace.html",
    "title": "Namespace Range | Grammarkdown API Reference",
    "keywords": "Namespace Range Package : grammarkdown Functions clone(range) Declaration function clone(range: Range): Range; Parameters Type Name Description Range range Returns Type Description Range collapseToEnd(range) Declaration function collapseToEnd(range: Range): Range; Parameters Type Name Description Range range Returns Type Description Range collapseToStart(range) Declaration function collapseToStart(range: Range): Range; Parameters Type Name Description Range range Returns Type Description Range contains(left, right) Declaration function contains(left: Range, right: Range): boolean; Parameters Type Name Description Range left Range right Returns Type Description boolean containsPosition(range, position) Declaration function containsPosition(range: Range, position: Position): boolean; Parameters Type Name Description Range range Position position Returns Type Description boolean create(start, end) Declaration function create(start: Position, end: Position): Range; Parameters Type Name Description Position start Position end Returns Type Description Range equals(left, right) Declaration function equals(left: Range, right: Range): boolean; Parameters Type Name Description Range left Range right Returns Type Description boolean intersects(left, right) Declaration function intersects(left: Range, right: Range): boolean; Parameters Type Name Description Range left Range right Returns Type Description boolean isCollapsed(range) Declaration function isCollapsed(range: Range): boolean; Parameters Type Name Description Range range Returns Type Description boolean"
  },
  "api/grammarkdown/resolver.html": {
    "href": "api/grammarkdown/resolver.html",
    "title": "Class Resolver | Grammarkdown API Reference",
    "keywords": "Class Resolver Package : grammarkdown Constructors (constructor)(bindings) Constructs a new instance of the Resolver class Declaration constructor(bindings: BindingTable); Parameters Type Name Description BindingTable bindings Methods createNavigator(node) Declaration createNavigator(node: Node): NodeNavigator | undefined; Parameters Type Name Description Node node Returns Type Description NodeNavigator | undefined getDeclarations(node) Declaration getDeclarations(node: Identifier): (SourceFile | Production | Parameter)[]; Parameters Type Name Description Identifier node Returns Type Description ( SourceFile | Production | Parameter )[] getParent(node) Declaration getParent(node: Node): Node | undefined; Parameters Type Name Description Node node Returns Type Description Node | undefined getProductionLinkId(node) Declaration getProductionLinkId(node: Identifier): string | undefined; Parameters Type Name Description Identifier node Returns Type Description string | undefined getReferences(node) Declaration getReferences(node: Identifier): Node<SyntaxKind>[]; Parameters Type Name Description Identifier node Returns Type Description Node < SyntaxKind >[] getRightHandSideLinkId(node, includePrefix) Declaration getRightHandSideLinkId(node: RightHandSide, includePrefix: boolean): string; Parameters Type Name Description RightHandSide node boolean includePrefix Returns Type Description string getSourceFileOfNode(node) Declaration getSourceFileOfNode(node: Node): SourceFile; Parameters Type Name Description Node node Returns Type Description SourceFile"
  },
  "api/grammarkdown/righthandside.html": {
    "href": "api/grammarkdown/righthandside.html",
    "title": "Class RightHandSide | Grammarkdown API Reference",
    "keywords": "Class RightHandSide Inheritance ProductionBodyBase < SyntaxKind.RightHandSide > RightHandSide Package : grammarkdown Constructors (constructor)(constraints, head, reference) Constructs a new instance of the RightHandSide class Declaration constructor(constraints: Constraints | undefined, head: SymbolSpan | undefined, reference: LinkReference | undefined); Parameters Type Name Description Constraints | undefined constraints SymbolSpan | undefined head LinkReference | undefined reference Properties constraints Declaration readonly constraints: Constraints | undefined; Property Value Type Description Constraints | undefined firstChild Declaration get firstChild(): Node | undefined; Property Value Type Description Node | undefined head Declaration readonly head: SymbolSpan | undefined; Property Value Type Description SymbolSpan | undefined lastChild Declaration get lastChild(): Node | undefined; Property Value Type Description Node | undefined reference Declaration readonly reference: LinkReference | undefined; Property Value Type Description LinkReference | undefined Methods children() Declaration children(): IterableIterator<Node>; Returns Type Description IterableIterator < Node > forEachChild(cbNode) Declaration forEachChild<T>(cbNode: (node: Node) => T | undefined): T | undefined; Parameters Type Name Description (node: Node ) => T | undefined cbNode Returns Type Description T | undefined Type Parameters Name Description T update(constraints, head, reference) Declaration update(constraints: Constraints | undefined, head: SymbolSpan | undefined, reference: LinkReference | undefined): RightHandSide; Parameters Type Name Description Constraints | undefined constraints SymbolSpan | undefined head LinkReference | undefined reference Returns Type Description RightHandSide"
  },
  "api/grammarkdown/righthandsidelist.html": {
    "href": "api/grammarkdown/righthandsidelist.html",
    "title": "Class RightHandSideList | Grammarkdown API Reference",
    "keywords": "Class RightHandSideList Inheritance ProductionBodyBase < SyntaxKind.RightHandSideList > RightHandSideList Package : grammarkdown Constructors (constructor)(elements) Constructs a new instance of the RightHandSideList class Declaration constructor(elements: ReadonlyArray<RightHandSide> | undefined); Parameters Type Name Description ReadonlyArray < RightHandSide > | undefined elements Properties elements Declaration readonly elements: ReadonlyArray<RightHandSide> | undefined; Property Value Type Description ReadonlyArray < RightHandSide > | undefined firstChild Declaration get firstChild(): Node | undefined; Property Value Type Description Node | undefined lastChild Declaration get lastChild(): Node | undefined; Property Value Type Description Node | undefined Methods children() Declaration children(): IterableIterator<Node>; Returns Type Description IterableIterator < Node > forEachChild(cbNode) Declaration forEachChild<T>(cbNode: (node: Node) => T | undefined): T | undefined; Parameters Type Name Description (node: Node ) => T | undefined cbNode Returns Type Description T | undefined Type Parameters Name Description T update(elements) Declaration update(elements: ReadonlyArray<RightHandSide> | undefined): RightHandSideList; Parameters Type Name Description ReadonlyArray < RightHandSide > | undefined elements Returns Type Description RightHandSideList"
  },
  "api/grammarkdown/scanner.html": {
    "href": "api/grammarkdown/scanner.html",
    "title": "Class Scanner | Grammarkdown API Reference",
    "keywords": "Class Scanner Package : grammarkdown Constructors (constructor)(filename, text, diagnostics, cancelable) Constructs a new instance of the Scanner class Declaration constructor(filename: string, text: string, diagnostics: DiagnosticMessages, cancelable?: Cancelable); Parameters Type Name Description string filename string text DiagnosticMessages diagnostics Cancelable cancelable (constructor)(filename, text, diagnostics, cancelable) Constructs a new instance of the Scanner class Declaration constructor(filename: string, text: string, diagnostics: DiagnosticMessages, cancelable?: CancellationToken | Cancelable); Parameters Type Name Description string filename string text DiagnosticMessages diagnostics CancellationToken | Cancelable cancelable Properties filename Declaration readonly filename: string; Property Value Type Description string text Declaration readonly text: string; Property Value Type Description string Methods getDiagnostics() Declaration getDiagnostics(): DiagnosticMessages; Returns Type Description DiagnosticMessages getHtmlTrivia() Declaration getHtmlTrivia(): HtmlTrivia[] | undefined; Returns Type Description HtmlTrivia [] | undefined getLen() Declaration getLen(): number; Returns Type Description number getPos() Declaration getPos(): number; Returns Type Description number getStartPos() Declaration getStartPos(): number; Returns Type Description number getToken() Declaration getToken(): SyntaxKind; Returns Type Description SyntaxKind getTokenIsUnterminated() Declaration getTokenIsUnterminated(): boolean; Returns Type Description boolean getTokenPos() Declaration getTokenPos(): number; Returns Type Description number getTokenText() Declaration getTokenText(): string; Returns Type Description string getTokenValue() Declaration getTokenValue(): string; Returns Type Description string hasPrecedingBlankLine() Declaration hasPrecedingBlankLine(): boolean; Returns Type Description boolean hasPrecedingDedent() Declaration hasPrecedingDedent(): boolean; Returns Type Description boolean hasPrecedingIndent() Declaration hasPrecedingIndent(): boolean; Returns Type Description boolean hasPrecedingLineTerminator() Declaration hasPrecedingLineTerminator(): boolean; Returns Type Description boolean hasPrecedingNewLine() Declaration hasPrecedingNewLine(): boolean; Returns Type Description boolean isIndented() Declaration isIndented(): boolean; Returns Type Description boolean isLineContinuation() Declaration isLineContinuation(): boolean; Returns Type Description boolean scan() Declaration scan(): SyntaxKind; Returns Type Description SyntaxKind speculate(callback, isLookahead) Declaration speculate<T>(callback: () => T, isLookahead: boolean): T; Parameters Type Name Description () => T callback boolean isLookahead Returns Type Description T Type Parameters Name Description T"
  },
  "api/grammarkdown/singlefilehost.html": {
    "href": "api/grammarkdown/singlefilehost.html",
    "title": "Class SingleFileHost | Grammarkdown API Reference",
    "keywords": "Class SingleFileHost Inheritance HostBase Host SingleFileHost Package : grammarkdown Constructors (constructor)(content, file, hostFallback) Constructs a new instance of the SingleFileHost class Declaration constructor(content: string, file?: string, hostFallback?: Host); Parameters Type Name Description string content string file Host hostFallback Properties content Declaration readonly content: string; Property Value Type Description string file Declaration readonly file: string; Property Value Type Description string parser Declaration protected get parser(): Parser; Property Value Type Description Parser Methods createParser() Declaration protected createParser(): Parser; Returns Type Description Parser getSourceFile(file, cancelable) Declaration getSourceFile(file: string, cancelable?: Cancelable): Promise<SourceFile | undefined>; Parameters Type Name Description string file Cancelable cancelable Returns Type Description Promise < SourceFile | undefined> getSourceFile(file, cancelable) Declaration getSourceFile(file: string, cancelable?: CancellationToken | Cancelable): Promise<SourceFile | undefined>; Parameters Type Name Description string file CancellationToken | Cancelable cancelable Returns Type Description Promise < SourceFile | undefined> getSourceFileSync(file, cancelable) Declaration getSourceFileSync(file: string, cancelable?: Cancelable): SourceFile | undefined; Parameters Type Name Description string file Cancelable cancelable Returns Type Description SourceFile | undefined getSourceFileSync(file, cancelable) Declaration getSourceFileSync(file: string, cancelable?: CancellationToken | Cancelable): SourceFile | undefined; Parameters Type Name Description string file CancellationToken | Cancelable cancelable Returns Type Description SourceFile | undefined normalizeFile(file) Declaration normalizeFile(file: string): string; Parameters Type Name Description string file Returns Type Description string readFile(file, cancelable) Declaration readFile(file: string, cancelable?: Cancelable): Promise<string | undefined>; Parameters Type Name Description string file Cancelable cancelable Returns Type Description Promise <string | undefined> readFile(file, cancelable) Declaration readFile(file: string, cancelable?: CancellationToken | Cancelable): Promise<string | undefined>; Parameters Type Name Description string file CancellationToken | Cancelable cancelable Returns Type Description Promise <string | undefined> readFileSync(file, cancelable) Declaration readFileSync(file: string, cancelable?: Cancelable): string | undefined; Parameters Type Name Description string file Cancelable cancelable Returns Type Description string | undefined readFileSync(file, cancelable) Declaration readFileSync(file: string, cancelable?: CancellationToken | Cancelable): string | undefined; Parameters Type Name Description string file CancellationToken | Cancelable cancelable Returns Type Description string | undefined registerKnownGrammar(_name, _file) Declaration registerKnownGrammar(_name: string, _file: string): void; Parameters Type Name Description string _name string _file Returns Type Description void resolveBuiltInGrammar(name) Declaration protected resolveBuiltInGrammar(name: string): string | undefined; Parameters Type Name Description string name Returns Type Description string | undefined resolveFile(file, referer) Declaration resolveFile(file: string, referer?: string): string; Parameters Type Name Description string file string referer Returns Type Description string resolveKnownGrammar(name) Declaration resolveKnownGrammar(name: string): string | undefined; Parameters Type Name Description string name Returns Type Description string | undefined writeFile(file, text, cancelable) Declaration writeFile(file: string, text: string, cancelable?: Cancelable): Promise<void>; Parameters Type Name Description string file string text Cancelable cancelable Returns Type Description Promise <void> writeFile(file, text, cancelable) Declaration writeFile(file: string, text: string, cancelable?: CancellationToken | Cancelable): Promise<void>; Parameters Type Name Description string file string text CancellationToken | Cancelable cancelable Returns Type Description Promise <void> writeFileSync(file, text, cancelable) Declaration writeFileSync(file: string, text: string, cancelable?: Cancelable): void; Parameters Type Name Description string file string text Cancelable cancelable Returns Type Description void writeFileSync(file, text, cancelable) Declaration writeFileSync(file: string, text: string, cancelable?: CancellationToken | Cancelable): void; Parameters Type Name Description string file string text CancellationToken | Cancelable cancelable Returns Type Description void"
  },
  "api/grammarkdown/singlelinecommenttrivia.html": {
    "href": "api/grammarkdown/singlelinecommenttrivia.html",
    "title": "Class SingleLineCommentTrivia | Grammarkdown API Reference",
    "keywords": "Class SingleLineCommentTrivia Inheritance CommentTriviaBase < SyntaxKind.SingleLineCommentTrivia > SingleLineCommentTrivia Package : grammarkdown Constructors (constructor)() Constructs a new instance of the SingleLineCommentTrivia class Declaration constructor();"
  },
  "api/grammarkdown/sourceelementbase.html": {
    "href": "api/grammarkdown/sourceelementbase.html",
    "title": "Class SourceElementBase | Grammarkdown API Reference",
    "keywords": "Class SourceElementBase Inheritance Node <TKind> SourceElementBase Package : grammarkdown"
  },
  "api/grammarkdown/sourcefile.html": {
    "href": "api/grammarkdown/sourcefile.html",
    "title": "Class SourceFile | Grammarkdown API Reference",
    "keywords": "Class SourceFile Inheritance Node < SyntaxKind.SourceFile > SourceFile Package : grammarkdown Constructors (constructor)(filename, text, elements) Constructs a new instance of the SourceFile class Declaration constructor(filename: string, text: string, elements: ReadonlyArray<SourceElement>); Parameters Type Name Description string filename string text ReadonlyArray < SourceElement > elements Properties elements Declaration readonly elements: ReadonlyArray<SourceElement>; Property Value Type Description ReadonlyArray < SourceElement > filename Declaration readonly filename: string; Property Value Type Description string firstChild Declaration get firstChild(): Node | undefined; Property Value Type Description Node | undefined imports Declaration imports: ReadonlyArray<string> | undefined; Property Value Type Description ReadonlyArray <string> | undefined lastChild Declaration get lastChild(): Node | undefined; Property Value Type Description Node | undefined lineMap Declaration readonly lineMap: LineMap; Property Value Type Description LineMap text Declaration readonly text: string; Property Value Type Description string Methods children() Declaration children(): IterableIterator<Node>; Returns Type Description IterableIterator < Node > forEachChild(cbNode) Declaration forEachChild<T>(cbNode: (node: Node) => T | undefined): T | undefined; Parameters Type Name Description (node: Node ) => T | undefined cbNode Returns Type Description T | undefined Type Parameters Name Description T update(elements) Declaration update(elements: ReadonlyArray<SourceElement>): SourceFile; Parameters Type Name Description ReadonlyArray < SourceElement > elements Returns Type Description SourceFile"
  },
  "api/grammarkdown/stringliteral.html": {
    "href": "api/grammarkdown/stringliteral.html",
    "title": "Class StringLiteral | Grammarkdown API Reference",
    "keywords": "Class StringLiteral Inheritance Node < SyntaxKind.StringLiteral > StringLiteral Package : grammarkdown Constructors (constructor)(text) Constructs a new instance of the StringLiteral class Declaration constructor(text: string | undefined); Parameters Type Name Description string | undefined text Properties text Declaration readonly text: string | undefined; Property Value Type Description string | undefined"
  },
  "api/grammarkdown/stringwriter.html": {
    "href": "api/grammarkdown/stringwriter.html",
    "title": "Class StringWriter | Grammarkdown API Reference",
    "keywords": "Class StringWriter Package : grammarkdown Constructors (constructor)(eol) Constructs a new instance of the StringWriter class Declaration constructor(eol?: string); Parameters Type Name Description string eol Properties size Declaration get size(): number; Property Value Type Description number Methods dedent() Declaration dedent(): void; Returns Type Description void indent() Declaration indent(): void; Returns Type Description void toString() Declaration toString(): string; Returns Type Description string write(text) Declaration write(text?: string): void; Parameters Type Name Description string text Returns Type Description void writeln(text) Declaration writeln(text?: string): void; Parameters Type Name Description string text Returns Type Description void"
  },
  "api/grammarkdown/symbol.html": {
    "href": "api/grammarkdown/symbol.html",
    "title": "Class Symbol | Grammarkdown API Reference",
    "keywords": "Class Symbol Package : grammarkdown Constructors (constructor)(kind, name) Constructs a new instance of the Symbol class Declaration constructor(kind: SymbolKind, name: string); Parameters Type Name Description SymbolKind kind string name Properties id Declaration id: number; Property Value Type Description number kind Declaration kind: SymbolKind; Property Value Type Description SymbolKind locals Declaration locals: SymbolTable | undefined; Property Value Type Description SymbolTable | undefined name Declaration name: string; Property Value Type Description string parent Declaration parent: Symbol | undefined; Property Value Type Description Symbol | undefined"
  },
  "api/grammarkdown/symbolkind.html": {
    "href": "api/grammarkdown/symbolkind.html",
    "title": "Enum SymbolKind | Grammarkdown API Reference",
    "keywords": "Enum SymbolKind Namespace : Assembly : .dll Syntax Fields Name Description Parameter Production SourceFile"
  },
  "api/grammarkdown/symbolset.html": {
    "href": "api/grammarkdown/symbolset.html",
    "title": "Class SymbolSet | Grammarkdown API Reference",
    "keywords": "Class SymbolSet Inheritance Node < SyntaxKind.SymbolSet > SymbolSet Package : grammarkdown Constructors (constructor)(openBraceToken, elements, closeBraceToken) Constructs a new instance of the SymbolSet class Declaration constructor(openBraceToken: Token<SyntaxKind.OpenBraceToken>, elements: ReadonlyArray<SymbolSpan> | undefined, closeBraceToken: Token<SyntaxKind.CloseBraceToken> | undefined); Parameters Type Name Description Token < SyntaxKind.OpenBraceToken > openBraceToken ReadonlyArray < SymbolSpan > | undefined elements Token < SyntaxKind.CloseBraceToken > | undefined closeBraceToken Properties closeBraceToken Declaration readonly closeBraceToken: Token<SyntaxKind.CloseBraceToken> | undefined; Property Value Type Description Token < SyntaxKind.CloseBraceToken > | undefined elements Declaration readonly elements: ReadonlyArray<SymbolSpan> | undefined; Property Value Type Description ReadonlyArray < SymbolSpan > | undefined firstChild Declaration get firstChild(): Node | undefined; Property Value Type Description Node | undefined lastChild Declaration get lastChild(): Node | undefined; Property Value Type Description Node | undefined openBraceToken Declaration readonly openBraceToken: Token<SyntaxKind.OpenBraceToken>; Property Value Type Description Token < SyntaxKind.OpenBraceToken > Methods children() Declaration children(): IterableIterator<Node>; Returns Type Description IterableIterator < Node > forEachChild(cbNode) Declaration forEachChild<T>(cbNode: (node: Node) => T | undefined): T | undefined; Parameters Type Name Description (node: Node ) => T | undefined cbNode Returns Type Description T | undefined Type Parameters Name Description T update(elements) Declaration update(elements: ReadonlyArray<SymbolSpan> | undefined): SymbolSet; Parameters Type Name Description ReadonlyArray < SymbolSpan > | undefined elements Returns Type Description SymbolSet"
  },
  "api/grammarkdown/symbolspan.html": {
    "href": "api/grammarkdown/symbolspan.html",
    "title": "Class SymbolSpan | Grammarkdown API Reference",
    "keywords": "Class SymbolSpan Inheritance Node < SyntaxKind.SymbolSpan > SymbolSpan Package : grammarkdown Constructors (constructor)(symbol, next) Constructs a new instance of the SymbolSpan class Declaration constructor(symbol: LexicalSymbol, next: SymbolSpan | undefined); Parameters Type Name Description LexicalSymbol symbol SymbolSpan | undefined next Properties firstChild Declaration get firstChild(): Node | undefined; Property Value Type Description Node | undefined lastChild Declaration get lastChild(): Node | undefined; Property Value Type Description Node | undefined next Declaration readonly next: SymbolSpan | undefined; Property Value Type Description SymbolSpan | undefined symbol Declaration readonly symbol: LexicalSymbol; Property Value Type Description LexicalSymbol Methods children() Declaration children(): IterableIterator<Node>; Returns Type Description IterableIterator < Node > forEachChild(cbNode) Declaration forEachChild<T>(cbNode: (node: Node) => T | undefined): T | undefined; Parameters Type Name Description (node: Node ) => T | undefined cbNode Returns Type Description T | undefined Type Parameters Name Description T update(symbol, next) Declaration update(symbol: LexicalSymbol, next: SymbolSpan | undefined): SymbolSpan; Parameters Type Name Description LexicalSymbol symbol SymbolSpan | undefined next Returns Type Description SymbolSpan"
  },
  "api/grammarkdown/symboltable.html": {
    "href": "api/grammarkdown/symboltable.html",
    "title": "Class SymbolTable | Grammarkdown API Reference",
    "keywords": "Class SymbolTable Package : grammarkdown Properties isEmpty Declaration get isEmpty(): boolean; Property Value Type Description boolean Methods resolveSymbol(name, kind) Declaration resolveSymbol(name: string, kind: SymbolKind): Symbol | undefined; Parameters Type Name Description string name SymbolKind kind Returns Type Description Symbol | undefined"
  },
  "api/grammarkdown/synchost.html": {
    "href": "api/grammarkdown/synchost.html",
    "title": "Class SyncHost | Grammarkdown API Reference",
    "keywords": "Class SyncHost Inheritance HostBase SyncHost Package : grammarkdown Constructors (constructor)({ readFileSync, writeFileSync, ...baseOptions }) Constructs a new instance of the SyncHost class Declaration constructor({ readFileSync, writeFileSync, ...baseOptions }?: SyncHostOptions); Parameters Type Name Description SyncHostOptions { readFileSync, writeFileSync, ...baseOptions } Methods forFile(content, file, hostFallback) Declaration static forFile(content: string, file?: string, hostFallback?: SyncHost): SyncSingleFileHost; Parameters Type Name Description string content string file SyncHost hostFallback Returns Type Description SyncSingleFileHost getSourceFileSync(file, cancelable) Declaration getSourceFileSync(file: string, cancelable?: Cancelable): SourceFile | undefined; Parameters Type Name Description string file Cancelable cancelable Returns Type Description SourceFile | undefined getSourceFileSync(file, cancelable) Declaration getSourceFileSync(file: string, cancelable?: CancellationToken | Cancelable): SourceFile | undefined; Parameters Type Name Description string file CancellationToken | Cancelable cancelable Returns Type Description SourceFile | undefined readFileSync(file, cancelable) Declaration readFileSync(file: string, cancelable?: Cancelable): string | undefined; Parameters Type Name Description string file Cancelable cancelable Returns Type Description string | undefined readFileSync(file, cancelable) Declaration readFileSync(file: string, cancelable?: CancellationToken | Cancelable): string | undefined; Parameters Type Name Description string file CancellationToken | Cancelable cancelable Returns Type Description string | undefined writeFileSync(file, text, cancelable) Declaration writeFileSync(file: string, text: string, cancelable?: Cancelable): void; Parameters Type Name Description string file string text Cancelable cancelable Returns Type Description void writeFileSync(file, text, cancelable) Declaration writeFileSync(file: string, text: string, cancelable?: CancellationToken | Cancelable): void; Parameters Type Name Description string file string text CancellationToken | Cancelable cancelable Returns Type Description void"
  },
  "api/grammarkdown/synchostoptions.html": {
    "href": "api/grammarkdown/synchostoptions.html",
    "title": "Interface SyncHostOptions | Grammarkdown API Reference",
    "keywords": "Interface SyncHostOptions Inheritance HostBaseOptions SyncHostOptions Package : grammarkdown Properties readFileSync Declaration readFileSync?: LegacyReadFileSyncCallback | ReadFileSyncCallback | false; Property Value Type Description LegacyReadFileSyncCallback | ReadFileSyncCallback | false writeFileSync Declaration writeFileSync?: LegacyWriteFileSyncCallback | WriteFileSyncCallback | false; Property Value Type Description LegacyWriteFileSyncCallback | WriteFileSyncCallback | false"
  },
  "api/grammarkdown/syncsinglefilehost.html": {
    "href": "api/grammarkdown/syncsinglefilehost.html",
    "title": "Class SyncSingleFileHost | Grammarkdown API Reference",
    "keywords": "Class SyncSingleFileHost Inheritance HostBase SyncHost SyncSingleFileHost Package : grammarkdown Constructors (constructor)(file, content, hostFallback) Constructs a new instance of the SyncSingleFileHost class Declaration constructor(file: string, content: string, hostFallback?: SyncHost); Parameters Type Name Description string file string content SyncHost hostFallback Properties content Declaration readonly content: string; Property Value Type Description string file Declaration readonly file: string; Property Value Type Description string Methods normalizeFile(file) Declaration normalizeFile(file: string): string; Parameters Type Name Description string file Returns Type Description string readFileSync(file, cancelable) Declaration readFileSync(file: string, cancelable?: Cancelable): string | undefined; Parameters Type Name Description string file Cancelable cancelable Returns Type Description string | undefined readFileSync(file, cancelable) Declaration readFileSync(file: string, cancelable?: CancellationToken | Cancelable): string | undefined; Parameters Type Name Description string file CancellationToken | Cancelable cancelable Returns Type Description string | undefined resolveFile(file, referer) Declaration resolveFile(file: string, referer?: string): string; Parameters Type Name Description string file string referer Returns Type Description string writeFileSync(file, text, cancelable) Declaration writeFileSync(file: string, text: string, cancelable?: Cancelable): void; Parameters Type Name Description string file string text Cancelable cancelable Returns Type Description void writeFileSync(file, text, cancelable) Declaration writeFileSync(file: string, text: string, cancelable?: CancellationToken | Cancelable): void; Parameters Type Name Description string file string text CancellationToken | Cancelable cancelable Returns Type Description void"
  },
  "api/grammarkdown/syntaxkind.html": {
    "href": "api/grammarkdown/syntaxkind.html",
    "title": "Enum SyntaxKind | Grammarkdown API Reference",
    "keywords": "Enum SyntaxKind Namespace : Assembly : .dll Syntax Fields Name Description Argument ArgumentList AtToken ButKeyword ButNotSymbol CloseBraceToken CloseBracketToken CloseParenToken ColonColonColonToken ColonColonToken ColonToken CommaToken Constraints Define DefineKeyword ElementOfToken EmptyAssertion EmptyKeyword EndOfFileToken EqualsEqualsToken EqualsToken ExclamationEqualsToken FalseKeyword FirstCommentTrivia FirstErrorNode FirstHtmlTrivia FirstKeyword FirstLiteral FirstProseFragmentLiteral FirstPunctuation FirstTextContent FirstToken FirstTrivia GoalKeyword GreaterThanToken HereKeyword HtmlCloseTagTrivia HtmlOpenTagTrivia Identifier Import ImportKeyword InvalidAssertion InvalidSymbol LastCommentTrivia LastErrorNode LastHtmlTrivia LastKeyword LastLiteral LastProseFragmentLiteral LastPunctuation LastTextContent LastToken LastTrivia LessThanExclamationToken LessThanMinusToken LexicalGoalAssertion LexicalKeyword LinkReference LookaheadAssertion LookaheadKeyword MultiLineCommentTrivia NoKeyword Nonterminal NoSymbolHereAssertion NotAnElementOfToken NotEqualToToken NotKeyword OfKeyword OneKeyword OneOfList OneOfSymbol OpenBraceToken OpenBracketGreaterThanToken OpenBracketToken OpenParenToken OrKeyword Parameter ParameterList PlaceholderSymbol PlusToken Production Prose ProseAssertion ProseFull ProseHead ProseMiddle ProseTail QuestionToken RightHandSide RightHandSideList SingleLineCommentTrivia SourceFile StringLiteral SymbolSet SymbolSpan Terminal ThroughKeyword TildeToken TrueKeyword UnicodeCharacterLiteral UnicodeCharacterRange Unknown"
  },
  "api/grammarkdown/terminal.html": {
    "href": "api/grammarkdown/terminal.html",
    "title": "Class Terminal | Grammarkdown API Reference",
    "keywords": "Class Terminal Inheritance OptionalSymbolBase < SyntaxKind.Terminal > Terminal Package : grammarkdown Constructors (constructor)(text, questionToken) Constructs a new instance of the Terminal class Declaration constructor(text: string | undefined, questionToken: Token<SyntaxKind.QuestionToken> | undefined); Parameters Type Name Description string | undefined text Token < SyntaxKind.QuestionToken > | undefined questionToken Properties firstChild Declaration get firstChild(): Node | undefined; Property Value Type Description Node | undefined lastChild Declaration get lastChild(): Node | undefined; Property Value Type Description Node | undefined text Declaration readonly text: string | undefined; Property Value Type Description string | undefined Methods children() Declaration children(): IterableIterator<Node>; Returns Type Description IterableIterator < Node > forEachChild(cbNode) Declaration forEachChild<T>(cbNode: (node: Node) => T | undefined): T | undefined; Parameters Type Name Description (node: Node ) => T | undefined cbNode Returns Type Description T | undefined Type Parameters Name Description T"
  },
  "api/grammarkdown/textchange-interface.html": {
    "href": "api/grammarkdown/textchange-interface.html",
    "title": "Interface TextChange | Grammarkdown API Reference",
    "keywords": "Interface TextChange Package : grammarkdown Properties range Declaration range: Range; Property Value Type Description Range text Declaration text: string; Property Value Type Description string"
  },
  "api/grammarkdown/textchange-namespace.html": {
    "href": "api/grammarkdown/textchange-namespace.html",
    "title": "Namespace TextChange | Grammarkdown API Reference",
    "keywords": "Namespace TextChange Package : grammarkdown Functions applyChange(originalText, change) Declaration function applyChange(originalText: string, change: TextChange): string; Parameters Type Name Description string originalText TextChange change Returns Type Description string clone(change) Declaration function clone(change: TextChange): { text: string; range: Range; }; Parameters Type Name Description TextChange change Returns Type Description { text: string; range: Range ; } create(text, range) Declaration function create(text: string, range: Range): { text: string; range: Range; }; Parameters Type Name Description string text Range range Returns Type Description { text: string; range: Range ; } isUnchanged(change) Declaration function isUnchanged(change: TextChange): boolean; Parameters Type Name Description TextChange change Returns Type Description boolean"
  },
  "api/grammarkdown/textcontent.html": {
    "href": "api/grammarkdown/textcontent.html",
    "title": "Interface TextContent | Grammarkdown API Reference",
    "keywords": "Interface TextContent Package : grammarkdown Properties text Declaration text: string | undefined; Property Value Type Description string | undefined"
  },
  "api/grammarkdown/textrange.html": {
    "href": "api/grammarkdown/textrange.html",
    "title": "Interface TextRange | Grammarkdown API Reference",
    "keywords": "Interface TextRange Package : grammarkdown Properties end Declaration end: number; Property Value Type Description number pos Declaration pos: number; Property Value Type Description number"
  },
  "api/grammarkdown/token.html": {
    "href": "api/grammarkdown/token.html",
    "title": "Class Token | Grammarkdown API Reference",
    "keywords": "Class Token Inheritance Node <TKind> Token Package : grammarkdown"
  },
  "api/grammarkdown/triviabase.html": {
    "href": "api/grammarkdown/triviabase.html",
    "title": "Class TriviaBase | Grammarkdown API Reference",
    "keywords": "Class TriviaBase Inheritance Node <TKind> TriviaBase Package : grammarkdown"
  },
  "api/grammarkdown/unicodecharacterliteral.html": {
    "href": "api/grammarkdown/unicodecharacterliteral.html",
    "title": "Class UnicodeCharacterLiteral | Grammarkdown API Reference",
    "keywords": "Class UnicodeCharacterLiteral Inheritance OptionalSymbolBase < SyntaxKind.UnicodeCharacterLiteral > UnicodeCharacterLiteral Package : grammarkdown Constructors (constructor)(text, questionToken) Constructs a new instance of the UnicodeCharacterLiteral class Declaration constructor(text: string | undefined, questionToken: Token<SyntaxKind.QuestionToken> | undefined); Parameters Type Name Description string | undefined text Token < SyntaxKind.QuestionToken > | undefined questionToken Properties firstChild Declaration get firstChild(): Node | undefined; Property Value Type Description Node | undefined lastChild Declaration get lastChild(): Node | undefined; Property Value Type Description Node | undefined text Declaration readonly text: string | undefined; Property Value Type Description string | undefined Methods children() Declaration children(): IterableIterator<Node>; Returns Type Description IterableIterator < Node > forEachChild(cbNode) Declaration forEachChild<T>(cbNode: (node: Node) => T | undefined): T | undefined; Parameters Type Name Description (node: Node ) => T | undefined cbNode Returns Type Description T | undefined Type Parameters Name Description T"
  },
  "api/grammarkdown/unicodecharacterrange.html": {
    "href": "api/grammarkdown/unicodecharacterrange.html",
    "title": "Class UnicodeCharacterRange | Grammarkdown API Reference",
    "keywords": "Class UnicodeCharacterRange Inheritance LexicalSymbolBase < SyntaxKind.UnicodeCharacterRange > UnicodeCharacterRange Package : grammarkdown Constructors (constructor)(left, throughKeyword, right) Constructs a new instance of the UnicodeCharacterRange class Declaration constructor(left: UnicodeCharacterLiteral, throughKeyword: Token<SyntaxKind.ThroughKeyword>, right: UnicodeCharacterLiteral); Parameters Type Name Description UnicodeCharacterLiteral left Token < SyntaxKind.ThroughKeyword > throughKeyword UnicodeCharacterLiteral right Properties firstChild Declaration get firstChild(): Node | undefined; Property Value Type Description Node | undefined lastChild Declaration get lastChild(): Node | undefined; Property Value Type Description Node | undefined left Declaration readonly left: UnicodeCharacterLiteral; Property Value Type Description UnicodeCharacterLiteral right Declaration readonly right: UnicodeCharacterLiteral; Property Value Type Description UnicodeCharacterLiteral throughKeyword Declaration readonly throughKeyword: Token<SyntaxKind.ThroughKeyword>; Property Value Type Description Token < SyntaxKind.ThroughKeyword > Methods children() Declaration children(): IterableIterator<Node>; Returns Type Description IterableIterator < Node > forEachChild(cbNode) Declaration forEachChild<T>(cbNode: (node: Node) => T | undefined): T | undefined; Parameters Type Name Description (node: Node ) => T | undefined cbNode Returns Type Description T | undefined Type Parameters Name Description T update(left, right) Declaration update(left: UnicodeCharacterLiteral, right: UnicodeCharacterLiteral): UnicodeCharacterRange; Parameters Type Name Description UnicodeCharacterLiteral left UnicodeCharacterLiteral right Returns Type Description UnicodeCharacterRange"
  },
  "index.html": {
    "href": "index.html",
    "title": "Overview | Grammarkdown API Reference",
    "keywords": "Grammarkdown grammarkdown is a markdown-style parser for syntactic grammars, designed to make it easily to rapidly prototype a grammar and statically verify its consistency. The grammar supported by grammarkdown is based on the parametric grammar used by ECMA-262 (the JavaScript language standard). Related ecmarkup"
  },
  "usage/cli.html": {
    "href": "usage/cli.html",
    "title": "Usage | Grammarkdown API Reference",
    "keywords": "Usage Syntax: grammarkdown [options] [...files] Examples: grammarkdown es6.grammar grammarkdown --out es6.md --format markdown es6.grammar Options: -f, --format FORMAT The output format. -h, --help Prints this message. --noChecks Does not perform static checking of the grammar. --noEmit Does not emit output. --noEmitOnError Does not emit output if there are errors. -o, --out FILE Specify the output file. -v, --version Prints the version."
  },
  "usage/syntax.html": {
    "href": "usage/syntax.html",
    "title": "Syntax | Grammarkdown API Reference",
    "keywords": "Syntax A grammarkdown grammar file uses significant whitespace in the form of line terminators and indentation. Tab (ASCII 0x9) characters are preferred, however using multiple spaces for indentation is supported as long as all nested elements have the same amount of leading whitespace. Productions A Production consists of a left-hand-side Nonterminal followed by a colon ( : ) separator and one or more right-hand-side sentences consisting of various forms of terminal and nonterminal symbols. For example: NameSpaceImport : `*` `as` ImportedBinding It is recommended that Productions should follow pascal-case naming conventions, to avoid collision with reserved keywords. You may specify multiple productions for a Nonterminal on multiple lines, as follows: NamedImports : `{` `}` NamedImports : `{` ImportList `}` NamedImports : `{` ImportList `,` `}` You may also specify multiple left-hand-side sentences for a single production by indenting them: NamedImports : `{` `}` `{` ImportList `}` `{` ImportList `,` `}` A Production may specify one or more parameters that can be used to reuse a Nonterminal in various circumstances: IdentifierReference[Yield] : Identifier [~Yield] `yield` A Production may also specify a limited set of terminals, by using the one of keyphrase: Keyword :: one of `break` `do` `in` `typeof` `case` `else` `instanceof` `var` `catch` `export` `new` `void` `class` `extends` `return` `while` `const` `finally` `super` `with` `continue` `for` `switch` `yield` `debugger` `function` `this` `default` `if` `throw` `delete` `import` `try` Parameters If a Nonterminal on the right-hand-side of a production needs to set a parameter, they supply it in an argument list. Supplying the name of the argument sets the parameter, prefixing the name with a question mark ('?) passes the current value of the parameter, and eliding the argument clears the parameter: Declaration[Yield] : HoistableDeclaration[?Yield] ClassDeclaration[?Yield] LexicalDeclaration[In, ?Yield] The right-hand-side of a Production consists of one or more Terminal or Nonterminal symbols, a sentence of Prose , or an Assertion . Terminals A Terminal symbol can be one of the following: A literal string of one or more characters enclosed in backticks ('`'). For example: `function` A sequence of three backtick characters, which denotes a backtick token. For example: ``` A unicode character literal enclosed in a leading less-than ('<') character and a trailing greater-than ('>') character. For example: <TAB> Nonterminals A Nonterminal symbol is an identifier, followed by an optional argument list, and an optional question mark ('?'). The question mark changes the cardinality of the Nonterminal from \"exactly one\" to \"zero or one\". The identifier may optionally be enclosed in | characters, if it happens to collide with a keyword. Character Literals and Ranges Character literals may be specified using one of the following forms: An abbreviation for a Unicode Code point, of the form <NBSP> A Unicode code point, of the form U+00A0 Character ranges may be specified using the through keyword: SourceCharacter but not one of `\"` or `\\` or U+0000 through U+001F Prose A sentence of Prose is a single line with a leading greater-than ('>') character. For example: > any Unicode code point The but not Condition The but not condition allows you to reference a production, excluding some part of that production. For example: MultiLineNotAsteriskChar :: SourceCharacter but not `*` Here, MultiLineNotAsteriskChar may contain any alternative from SourceCharacter , except the terminal `*` . The one of Condition You can exclude multiple alternatives by including a list of symbols to exclude through the use of the one of keyphrase. Each entry in the list is separated by or : MultiLineNotForwardSlashOrAsteriskChar :: SourceCharacter but not one of `/` or `*` Assertions An Assertion is a zero-width test that must evaluate successfully for the Production to be considered. Assertions are enclosed in a leading open bracket ('[') character and a trailing close-bracket (']') character. The possible assertions include: The empty assertion , which matches exactly zero tokens: [empty] The lookahead assertion , which verifies the next tokens in the stream: [lookahead != `function`] The no-symbol-here assertion , which verifies the next token is not the provided symbol: [no LineTerminator here] The lexical-goal assertion , which states that the current lexical goal is the supplied Nonterminal : [lexical goal InputElementRegExp] The parameter assertion , which states the supplied parameter to the current production is either set (using the plus ('+') character), or cleared (using the tilde ('~') character): [~Yield] `yield` The prose assertion , which allows for arbitrary prose, mixed with terminals and nonterminals: [> prose text `terminal` prose text |NonTerminal| prose text] A lookahead assertion has the following operators: The == operator states the lookahead phrase is matched: [lookahead == `class`] The != operator states the lookahead phrase is not matched: [lookahead != `function`] The <- operator states that any matching phrase in the provided set is matched: [lookahead <- { `public`, `private` }] The <! operator states that any matching phrase in the provided set is not matched: [lookahead <! { `{`, `function` }] Linking During emit, grammarkdown implicitly adds a generated name for each Production and Right-hand side that can be used to link directly to the production using a URI fragment. You can explicitly set the name for a production by tagging it with a custom link name: Declaration[Yield] : HoistableDeclaration[?Yield] #declaration-hoistable ClassDeclaration[?Yield] #declaration-class LexicalDeclaration[In, ?Yield] #declaration-lexical Comments You can also annotate your grammar with C-style single-line and multi-line comments. Examples For comprehensive examples of grammarkdown syntax and output, you can review the following samples: ECMA-262 version 2015 (ES6) Grammar Plain-text HTML TypeScript 1.5 Supplemental Grammar Plain-text HTML"
  }
}