@define noStrictParametricProductions true
@import "es2015"

TypeParameters :
    `<` TypeParameterList `>`

TypeParameterList :
    TypeParameter
    TypeParameterList `,` TypeParameter

TypeParameter :
    Identifier Constraint?

Constraint :
    `extends` Type

TypeArguments :
    `<` TypeArgumentList `>`

TypeArgumentList :
    TypeArgument
    TypeArgumentList `,` TypeArgument

TypeArgument :
    Type

Type :
    PrimaryOrUnionType
    FunctionType
    ConstructorType

PrimaryOrUnionType :
    PrimaryType
    UnionType

PrimaryType :
    ParenthesizedType
    PredefinedType
    TypeReference
    ObjectType
    ArrayType
    TupleType
    TypeQuery

ParenthesizedType :
    `(` Type `)`

PredefinedType :
    `any`
    `number`
    `boolean`
    `string`
    `void`

TypeReference :
    TypeName [no LineTerminator here] TypeArguments?

TypeName :
    Identifier
    ModuleName `.` Identifier

ModuleName :
    Identifier
    ModuleName `.` Identifier

ObjectType :
    `{` TypeBody? `}`

TypeBody :
    TypeMemberList `;`?

TypeMemberList :
    TypeMember
    TypeMemberList `;` TypeMember

TypeMember :
    PropertySignature
    CallSignature
    ConstructSignature
    IndexSignature
    MethodSignature

ArrayType :
    PrimaryType [no LineTerminator here] `[` `]`

TupleType :
    `[` TupleElementTypes `]`

TupleElementTypes :
    TupleElementType
    TupleElementTypes `,` TupleElementType

TupleElementType :
    Type

UnionType :
    PrimaryOrUnionType `|` PrimaryType

FunctionType :
    TypeParameters? `(` ParameterList? `)` `=>` Type

ConstructorType :
    `new` TypeParameters? `(` ParameterList? `)` `=>` Type

TypeQuery :
    `typeof` TypeQueryExpression

TypeQueryExpression :
    Identifier
    TypeQueryExpression `.` IdentifierName

PropertySignature :
    PropertyName `?`? TypeAnnotation?

PropertyName :
    IdentifierName
    StringLiteral
    NumericLiteral

CallSignature :
    TypeParameters? `(` ParameterList? `)` TypeAnnotation?

ParameterList :
    RequiredParameterList
    OptionalParameterList
    RestParameter
    RequiredParameterList `,` OptionalParameterList
    RequiredParameterList `,` RestParameter
    OptionalParameterList `,` RestParameter
    RequiredParameterList `,` OptionalParameterList `,` RestParameter

RequiredParameterList :
    RequiredParameter
    RequiredParameterList `,` RequiredParameter

RequiredParameter :
    AccessibilityModifier? Identifier TypeAnnotation?
    Identifier `:` StringLiteral

AccessibilityModifier :
    `public`
    `private`
    `protected`

OptionalParameterList :
    OptionalParameter
    OptionalParameterList `,` OptionalParameter

OptionalParameter :
    AccessibilityModifier? Identifier `?` TypeAnnotation?
    AccessibilityModifier? Identifier TypeAnnotation? Initializer
    Identifier `?` `:` StringLiteral

RestParameter :
    `...` Identifier TypeAnnotation?

ConstructSignature :
    `new` TypeParameters? `(` ParameterList? `)` TypeAnnotation?

IndexSignature :
    `[` Identifier `:` `string` `]` TypeAnnotation
    `[` Identifier `:` `number` `]` TypeAnnotation

MethodSignature :
    PropertyName `?`? CallSignature

TypeAliasDeclaration :
    `type` Identifier `=` Type `;`

PropertyAssignment :
    PropertyName `:` AssignmentExpression
    PropertyName CallSignature `{` FunctionBody `}`
    GetAccessor
    SetAccessor

GetAccessor :
    `get` PropertyName `(` `)` TypeAnnotation? `{` FunctionBody `}`

SetAccessor :
    `set` PropertyName `(` Identifier TypeAnnotation? `)` `{` FunctionBody `}`

ElementList :
    Elision? AssignmentExpression
    Elision? SpreadElement
    ElementList `,` Elision? AssignmentExpression
    ElementList `,` Elision? SpreadElement

SpreadElement :
    `...` AssignmentExpression

CallExpression :
    `super` `(` ArgumentList? `)`
    `super` `.` IdentifierName

FunctionExpression :
    `function` Identifier? CallSignature `{` FunctionBody `}`

AssignmentExpression :
    ArrowFunctionExpression

ArrowFunctionExpression :
    ArrowFormalParameters `=>` Block
    ArrowFormalParameters `=>` AssignmentExpression

ArrowFormalParameters :
    CallSignature
    Identifier

Arguments :
    TypeArguments? `(` ArgumentList? `)`

UnaryExpression :
    `<` Type `>` UnaryExpression

VariableDeclaration :
    SimpleVariableDeclaration
    DestructuringVariableDeclaration

SimpleVariableDeclaration :
    Identifier TypeAnnotation? Initializer?

TypeAnnotation :
    `:` Type

DestructuringVariableDeclaration :
    BindingPattern TypeAnnotation? Initializer

BindingPattern :
    ObjectBindingPattern
    ArrayBindingPattern

ObjectBindingPattern :
    `{` `}`
    `{` BindingPropertyList `,`? `}`

BindingPropertyList :
    BindingProperty
    BindingPropertyList `,` BindingProperty

BindingProperty :
    Identifier Initializer?
    PropertyName `:` Identifier Initializer?
    PropertyName `:` BindingPattern Initializer?

ArrayBindingPattern :
    `[` Elision? BindingRestElement? `]`
    `[` BindingElementList `]`
    `[` BindingElementList `,` Elision? BindingRestElement? `]`

BindingElementList :
    Elision? BindingElement
    BindingElementList `,` Elision? BindingElement

BindingElement :
    Identifier Initializer?
    BindingPattern Initializer?

BindingRestElement :
    `...` Identifier

FunctionDeclaration :
    FunctionOverloads? FunctionImplementation

FunctionOverloads :
    FunctionOverload
    FunctionOverloads FunctionOverload

FunctionOverload :
    `function` Identifier CallSignature `;`

FunctionImplementation :
    `function` Identifier CallSignature `{` FunctionBody `}`

InterfaceDeclaration :
    `interface` Identifier TypeParameters? InterfaceExtendsClause? ObjectType

InterfaceExtendsClause :
    `extends` ClassOrInterfaceTypeList

ClassOrInterfaceTypeList :
    ClassOrInterfaceType
    ClassOrInterfaceTypeList `,` ClassOrInterfaceType

ClassOrInterfaceType :
    TypeReference

ClassDeclaration :
    `class` Identifier TypeParameters? ClassHeritage `{` ClassBody `}`

ClassHeritage :
    ClassExtendsClause? ImplementsClause?

ClassExtendsClause :
    `extends` ClassType

ClassType :
    TypeReference

ImplementsClause :
    `implements` ClassOrInterfaceTypeList

ClassBody :
    ClassElements?

ClassElements :
    ClassElement
    ClassElements ClassElement

ClassElement :
    ConstructorDeclaration
    PropertyMemberDeclaration
    IndexMemberDeclaration

ConstructorDeclaration :
    ConstructorOverloads? ConstructorImplementation

ConstructorOverloads :
    ConstructorOverload
    ConstructorOverloads ConstructorOverload

ConstructorOverload :
    AccessibilityModifier? `constructor` `(` ParameterList? `)` `;`

ConstructorImplementation :
    AccessibilityModifier? `constructor` `(` ParameterList? `)` `{` FunctionBody `}`

PropertyMemberDeclaration :
    MemberVariableDeclaration
    MemberFunctionDeclaration
    MemberAccessorDeclaration

MemberVariableDeclaration :
    AccessibilityModifier? `static`? PropertyName TypeAnnotation? Initializer? `;`

MemberFunctionDeclaration :
    MemberFunctionOverloads? MemberFunctionImplementation

MemberFunctionOverloads :
    MemberFunctionOverload
    MemberFunctionOverloads MemberFunctionOverload

MemberFunctionOverload :
    AccessibilityModifier? `static`? PropertyName CallSignature `;`

MemberFunctionImplementation :
    AccessibilityModifier? `static`? PropertyName CallSignature `{` FunctionBody `}`

MemberAccessorDeclaration :
    AccessibilityModifier? `static`? GetAccessor
    AccessibilityModifier? `static`? SetAccessor

IndexMemberDeclaration :
    IndexSignature `;`

EnumDeclaration :
    `const`? `enum` Identifier `{` EnumBody? `}`

EnumBody :
    EnumMemberList `,`?

EnumMemberList :
    EnumMember
    EnumMemberList `,` EnumMember

EnumMember :
    PropertyName
    PropertyName `=` EnumValue

EnumValue :
    AssignmentExpression

ModuleDeclaration :
    `module` IdentifierPath `{` ModuleBody `}`

IdentifierPath :
    Identifier
    IdentifierPath `.` Identifier

ModuleBody :
    ModuleElements?

ModuleElements :
    ModuleElement
    ModuleElements ModuleElement

ModuleElement :
    Statement
    `export`? VariableDeclaration
    `export`? FunctionDeclaration
    `export`? ClassDeclaration
    `export`? InterfaceDeclaration
    `export`? TypeAliasDeclaration
    `export`? EnumDeclaration
    `export`? ModuleDeclaration
    `export`? ImportDeclaration
    `export`? AmbientDeclaration

ImportDeclaration :
    `import` Identifier `=` EntityName `;`

EntityName :
    ModuleName
    ModuleName `.` Identifier

SourceFile :
    ImplementationSourceFile
    DeclarationSourceFile

ImplementationSourceFile :
    ImplementationElements?

ImplementationElements :
    ImplementationElement
    ImplementationElements ImplementationElement

ImplementationElement :
    ModuleElement
    ExportAssignment
    AmbientExternalModuleDeclaration
    `export`? ExternalImportDeclaration

DeclarationSourceFile :
    DeclarationElements?

DeclarationElements :
    DeclarationElement
    DeclarationElements DeclarationElement

DeclarationElement :
    ExportAssignment
    AmbientExternalModuleDeclaration
    `export`? InterfaceDeclaration
    `export`? TypeAliasDeclaration
    `export`? ImportDeclaration
    `export`? AmbientDeclaration
    `export`? ExternalImportDeclaration

ExternalImportDeclaration :
    `import` Identifier `=` ExternalModuleReference `;`

ExternalModuleReference :
    `require` `(` StringLiteral `)`

ExportAssignment :
    `export` `=` Identifier `;`

AmbientDeclaration :
    `declare` AmbientVariableDeclaration
    `declare` AmbientFunctionDeclaration
    `declare` AmbientClassDeclaration
    `declare` AmbientEnumDeclaration
    `declare` AmbientModuleDeclaration

AmbientVariableDeclaration :
    `var` Identifier TypeAnnotation? `;`

AmbientFunctionDeclaration :
    `function` Identifier CallSignature `;`

AmbientClassDeclaration :
    `class` Identifier TypeParameters? ClassHeritage `{` AmbientClassBody `}`

AmbientClassBody :
    AmbientClassBodyElements?

AmbientClassBodyElements :
    AmbientClassBodyElement
    AmbientClassBodyElements AmbientClassBodyElement

AmbientClassBodyElement :
    AmbientConstructorDeclaration
    AmbientPropertyMemberDeclaration
    IndexSignature

AmbientConstructorDeclaration :
    `constructor` `(` ParameterList? `)` `;`

AmbientPropertyMemberDeclaration :
    AccessibilityModifier? `static`? PropertyName TypeAnnotation? `;`
    AccessibilityModifier? `static`? PropertyName CallSignature `;`

AmbientEnumDeclaration :
    EnumDeclaration

AmbientModuleDeclaration :
    `module` IdentifierPath `{` AmbientModuleBody `}`

AmbientModuleBody :
    AmbientModuleElements?

AmbientModuleElements :
    AmbientModuleElement
    AmbientModuleElements AmbientModuleElement

AmbientModuleElement :
    `export`? AmbientVariableDeclaration
    `export`? AmbientFunctionDeclaration
    `export`? AmbientClassDeclaration
    `export`? InterfaceDeclaration
    `export`? AmbientEnumDeclaration
    `export`? AmbientModuleDeclaration
    `export`? ImportDeclaration

AmbientExternalModuleDeclaration :
    `declare` `module` StringLiteral `{` AmbientExternalModuleBody `}`

AmbientExternalModuleBody :
    AmbientExternalModuleElements?

AmbientExternalModuleElements :
    AmbientExternalModuleElement
    AmbientExternalModuleElements AmbientExternalModuleElement

AmbientExternalModuleElement :
    AmbientModuleElement
    ExportAssignment
    `export`? ExternalImportDeclaration
